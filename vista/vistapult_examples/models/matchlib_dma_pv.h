
/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for matchlib_dma.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 5.1.0
//* Generated on: Mar. 11, 2022 09:04:17 AM, (user: russk)
//* Automatically merged on: Mar. 11, 2022 11:45:30 AM, (user: russk)
//*>


#pragma once

#include "matchlib_dma_model.h"
#include "dma.h"

using namespace tlm;

//This class inherits from the matchlib_dma_pv_base class

class matchlib_dma_pv : public matchlib_dma_pv_base, public sysbus_axi {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(matchlib_dma_pv);
  matchlib_dma_pv(sc_core::sc_module_name module_name);  
  
 protected:
  /////////////////////////////////////////
  // write callbacks of registers
  ////////////////////////////////////////// 
  void cb_write_source(unsigned int newValue);
  void cb_write_destination(unsigned int newValue);
  void cb_write_size(unsigned int newValue);
  void cb_write_go(unsigned int newValue);
  void cb_write_irq_ack(unsigned int newValue);  

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool slave_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool slave_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size); 
  virtual void cb_transport_dbg_source(tlm::tlm_generic_payload& trans);
  virtual void cb_transport_dbg_destination(tlm::tlm_generic_payload& trans);
  virtual void cb_transport_dbg_size(tlm::tlm_generic_payload& trans);
  virtual void cb_transport_dbg_go(tlm::tlm_generic_payload& trans);
  virtual void cb_transport_dbg_irq_ack(tlm::tlm_generic_payload& trans); 
  bool slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   

  // added to bring in matchlib component
 private:
  dma CCS_INIT_S1(matchlib_dma_instance); 

  Connections::Combinational<bool> CCS_INIT_S1(dma_done);
  sc_event send_transaction;

  r_chan<> CCS_INIT_S1(dma_slave_r_chan);
  w_chan<> CCS_INIT_S1(dma_slave_w_chan);
  r_chan<> CCS_INIT_S1(dma_master_r_chan);
  w_chan<> CCS_INIT_S1(dma_master_w_chan);
  
  r_master<> CCS_INIT_S1(tb_r_master);
  w_master<> CCS_INIT_S1(tb_w_master);
  r_slave<>  CCS_INIT_S1(tb_r_slave);
  w_slave<>  CCS_INIT_S1(tb_w_slave);

  void set_dma_register();

  sc_clock        clk;
  sc_signal<bool> rst_bar; 

  void write_source_register();
  void send_to_set_source(unsigned int addr, unsigned int);

  void slave_r_process();
  void slave_w_process();
  void done_mon();
  void reset();
  void set_source();
  // void heartbeat();

  unsigned int transaction_addr;
  unsigned int transaction_data;
};


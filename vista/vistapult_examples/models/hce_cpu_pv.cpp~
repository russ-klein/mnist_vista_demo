
/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for hce_cpu.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 5.1.0
//* Generated on: Mar. 06, 2022 07:21:12 PM, (user: russk)
//*>



#include "hce_cpu_pv.h"
#include <iostream>
                                  
using namespace sc_core;
using namespace sc_dt;
using namespace std;

#define HOST

//constructor
hce_cpu_pv::hce_cpu_pv(sc_module_name module_name) 
  : hce_cpu_pv_base(module_name) {
   SC_THREAD(thread);
} 

//int mnist_main(int a, int b);
//int mnist_main();
// This thread can be used to generate outgoing transactions
void hce_cpu_pv::thread() {

  mnist_main();
/*
  cout << "MNIST process launching... " << endl;

  int read_pipe_handle[2];
  int write_pipe_handle[2];
  int r;

  pipe(read_pipe_handle);
  pipe(write_pipe_handle);

  r = fork();

  if (r==-1) {
    fprintf(stderr, "fork failed! \n");
    perror("Vista");
    sc_stop();
  }  

  if (r==0) {  
    mnist_main(read_pipe_handle[0], write_pipe_handle[1]);
    //mnist_main();
  } else {
    handle_bus_cycles(read_pipe_handle[1], write_pipe_handle[0]);
  }
i*/
  cout << "MNIST process terminating... " << endl;
  sc_stop();
}


// callback for any change in signal: int_source of type: sc_in<bool>
void hce_cpu_pv::int_source_callback() {
}


unsigned int hce_cpu_pv::read_word(unsigned int address)
{
  unsigned int data;
  mb_address_type mb_addr = address;

  cpu_master_read(mb_addr, &data, 1);
  
  return data;
}

void hce_cpu_pv::write_word(unsigned int address, unsigned int data)
{
  mb_address_type mb_addr = address;

  cpu_master_write(mb_addr, data);
}

void hce_cpu_pv::handle_bus_cycles(int read_pipe_handle, int write_pipe_handle)
{
  unsigned int command[3];
  unsigned int data;
  int r;

  printf("handles: %d %d \n", read_pipe_handle, write_pipe_handle);

  while (1) {
    r = read(read_pipe_handle, command, sizeof(command));
    if (r == -1) {
      printf("problem with read %d \n", errno);
      perror("stupidshit_read");
      sc_stop();
    }

    if (command[0] == 0) { // write operation
      cpu_master_write(command[1], command[2]);
    }

    if (command[0] == 1) { // read operation
      cpu_master_read((mb_address_type) command[1], data); // why the f can;t the interface handle the cast??
      r = write(write_pipe_handle, &data, sizeof(data));
      if (r == -1) {
        printf("problem with read %d \n", errno);
        perror("stupidshit_write");
        sc_stop();
      }
    }

    if ((command[0] != 1) && (command[0] != 0)) {
      fprintf(stderr, "programmer error: your programmer has made a mistake, we apologize, programmer error \n");
      printf("Problem command was: %d \n", command[0]);
      sc_stop();
    }
  }

  wait();
}

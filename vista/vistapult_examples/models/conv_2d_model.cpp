
/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* This class contains the infrastructure to define the behavior of the component.
//* The conv_2d_pv will be derived from this class.
//*
//* Model Builder version: 5.1.0
//* Generated on: Jul. 25, 2022 05:09:30 PM, (user: russk)
//*>


#include "conv_2d_model.h"

#ifdef MODEL_BUILDER_VERSION_NUMBER
#if 5100 != MODEL_BUILDER_VERSION_NUMBER
#error "This model was generated using Model Builder version: 5.1.0. Please regenerate model."
#endif
#else
#error "Please regenerate model."
#endif

using namespace sc_core;
using namespace sc_dt;
using namespace std;



conv_2d_pv_base::conv_2d_pv_base(sc_module_name& module_name) :
  conv_2d_pv_base_mb_compatibility(module_name),
  conv_2d_pv_base_parameters(this),
  VISTA_MB_PV_INIT_MEMBER(master),
  VISTA_MB_PV_INIT_MEMBER(slave),
  VISTA_MB_PV_INIT_MEMBER(int_out),
  VISTA_MB_PV_INIT_MEMBER(slave_memory),
  go("go", &slave_memory, ((0) / 4), ( (0) + (((0) % 4) << 3)), ( (31) + (((0) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  go_ready("go_ready", &slave_memory, ((4) / 4), ( (0) + (((4) % 4) << 3)), ( (31) + (((4) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  done("done", &slave_memory, ((8) / 4), ( (0) + (((8) % 4) << 3)), ( (31) + (((8) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  done_valid("done_valid", &slave_memory, ((0xc) / 4), ( (0) + (((0xc) % 4) << 3)), ( (31) + (((0xc) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  image("image", &slave_memory, ((0x10) / 4), ( (0) + (((0x10) % 4) << 3)), ( (31) + (((0x10) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  weights("weights", &slave_memory, ((0x14) / 4), ( (0) + (((0x14) % 4) << 3)), ( (31) + (((0x14) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  biases("biases", &slave_memory, ((0x18) / 4), ( (0) + (((0x18) % 4) << 3)), ( (31) + (((0x18) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  output_image("output_image", &slave_memory, ((0x1c) / 4), ( (0) + (((0x1c) % 4) << 3)), ( (31) + (((0x1c) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  num_input_images("num_input_images", &slave_memory, ((0x20) / 4), ( (0) + (((0x20) % 4) << 3)), ( (31) + (((0x20) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  num_output_images("num_output_images", &slave_memory, ((0x24) / 4), ( (0) + (((0x24) % 4) << 3)), ( (31) + (((0x24) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  height("height", &slave_memory, ((0x28) / 4), ( (0) + (((0x28) % 4) << 3)), ( (31) + (((0x28) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  width("width", &slave_memory, ((0x2c) / 4), ( (0) + (((0x2c) % 4) << 3)), ( (31) + (((0x2c) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  filter_height("filter_height", &slave_memory, ((0x30) / 4), ( (0) + (((0x30) % 4) << 3)), ( (31) + (((0x30) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  filter_width("filter_width", &slave_memory, ((0x34) / 4), ( (0) + (((0x34) % 4) << 3)), ( (31) + (((0x34) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  relu("relu", &slave_memory, ((0x3c) / 4), ( (0) + (((0x3c) % 4) << 3)), ( (31) + (((0x3c) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  bias("bias", &slave_memory, ((0x40) / 4), ( (0) + (((0x40) % 4) << 3)), ( (31) + (((0x40) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS),
  maxpool("maxpool", &slave_memory, ((0x38) / 4), ( (0) + (((0x38) % 4) << 3)), ( (31) + (((0x38) % 4) << 3)),  (32), mb::tlm20::READ_WRITE_ACCESS) {
  
  
    m_mb_debug = new mb::utl::mb_debug_handler(mb::utl::mb_debug_handler::MB_DEBUG_PORT_TYPE, this->name());


  // master - not a vector port
  // slave - not a vector port
  // int_out - not a vector port
  unsigned u = 0;



  slave_memory.setPortIndex("slave");
  payload_on_stack = 0;
  payload_for_token = 0;
  reset_registers();
  
  // reset value for output signals

  int_out.initialize(0);
  // reset value for input signals

  VISTA_MB_PV_SET_SELF_TRANSPORT_DBG(go);
  VISTA_MB_PV_SET_SELF_WRITE_CB(go);
  VISTA_MB_PV_SET_TARGET_GET_DMI_DELAY_CB(slave);
  VISTA_MB_PV_BIND_FW_PROCESS_TO_MEMORY_DEFAULT_IF(slave);
  // master bw binding 
  VISTA_MB_PV_BIND_BW_PROCESS_TO_MASTER(master);
  // slave bw callbacks 
  VISTA_MB_PV_REGISTER_SELF_FW_PROCESS_CALLBACKS(slave);
  // master bw callbacks 
  VISTA_MB_PV_REGISTER_SELF_BW_PROCESS_CALLBACKS(master);

}


conv_2d_pv_base::~conv_2d_pv_base() {
  
  if(m_mb_debug != NULL) delete m_mb_debug;
}



void conv_2d_pv_base::reset_registers() {
  // reset all registers
  unsigned u = 0;


  go.setResetValue(0);
  image.setResetValue(0);
  weights.setResetValue(0);
  biases.setResetValue(0);
  output_image.setResetValue(0);
  num_input_images.setResetValue(0);
  num_output_images.setResetValue(0);
  height.setResetValue(0);
  width.setResetValue(0);
  filter_height.setResetValue(0);
  filter_width.setResetValue(0);
  maxpool.setResetValue(0);
  relu.setResetValue(0);
  bias.setResetValue(0);
  done_valid.setResetValue(0);
  go_ready.setResetValue(1);
  done.setResetValue(0);
}


void conv_2d_pv_base::reset_model() {
  
  reset_registers();
  // reset value for output signals

  int_out.write(0);
  // reset value for input signals



}

conv_2d_pv_base_parameters::conv_2d_pv_base_parameters(sc_object* object) :
  m_object(object),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, clock, sc_core::sc_time(10, sc_core::SC_NS), "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, signal_clock, clock, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, axi_clock, clock, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, nominal_voltage, 1, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_debug, false, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_debug_start_time, sc_core::sc_time(0, sc_core::SC_NS), "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_debug_end_time, sc_core::sc_time(0, sc_core::SC_NS), "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_debug_address_read, "0x10:0x0", "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_debug_address_write, "0x10:0x0", "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, port_enable, true, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, call_to_default_if, false, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, verbose_parameters, true, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, dmi_enabled, true, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, warning_level, "WARNING", "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, slave_pipeline_length, 2, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, slave_outstanding, 1, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, slave_read_data_queue_size, 0, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, slave_write_data_queue_size, 0, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, master_outstanding, 1, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, master_read_data_queue_size, 0, "conv_2d"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, master_write_data_queue_size, 0, "conv_2d")
{
  if(verbose_parameters) print_parameters();
}

void conv_2d_pv_base_parameters::print_parameters()
{
  const char* name;
  if (!strcmp(m_object->basename(), "PV"))
    name = m_object->get_parent_object()->name();
  else
    name = m_object->name();

  std::cout.setf(ios::hex, ios::basefield);
  std::cout.setf(ios::showbase);
  std::cout << name << "::parameters:\n";
  std::cout << "\tclock = " << clock << "\n";
  std::cout << "\tsignal_clock = " << signal_clock << "\n";
  std::cout << "\taxi_clock = " << axi_clock << "\n";
  std::cout << "\tnominal_voltage = " << nominal_voltage << "\n";
  std::cout << "\tmb_debug = " << mb_debug << "\n";
  std::cout << "\tmb_debug_start_time = " << mb_debug_start_time << "\n";
  std::cout << "\tmb_debug_end_time = " << mb_debug_end_time << "\n";
  std::cout << "\tmb_debug_address_read = " << mb_debug_address_read << "\n";
  std::cout << "\tmb_debug_address_write = " << mb_debug_address_write << "\n";
  std::cout << "\tport_enable = " << port_enable << "\n";
  std::cout << "\tcall_to_default_if = " << call_to_default_if << "\n";
  std::cout << "\tverbose_parameters = " << verbose_parameters << "\n";
  std::cout << "\tdmi_enabled = " << dmi_enabled << "\n";
  std::cout << "\twarning_level = " << warning_level << "\n";
  std::cout << "\tslave_pipeline_length = " << slave_pipeline_length << "\n";
  std::cout << "\tslave_outstanding = " << slave_outstanding << "\n";
  std::cout << "\tslave_read_data_queue_size = " << slave_read_data_queue_size << "\n";
  std::cout << "\tslave_write_data_queue_size = " << slave_write_data_queue_size << "\n";
  std::cout << "\tmaster_outstanding = " << master_outstanding << "\n";
  std::cout << "\tmaster_read_data_queue_size = " << master_read_data_queue_size << "\n";
  std::cout << "\tmaster_write_data_queue_size = " << master_write_data_queue_size << "\n";
  std::cout.unsetf(ios::showbase);
  std::cout.setf(ios::dec, ios::basefield);
  std::cout << std::endl;
}



void conv_2d_pv_base::end_of_elaboration() {
  BASE_TYPE::end_of_elaboration();
  slave_memory.bind_bw_direct_mem_if(slave[0]);
}




/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* 
//* Any change in parameters, policies, ports, protocols, etc. will change this file
//* upon generation of the timing model (using generate_timing_model command).
//* The conv_2d_t will be derived from this class.
//*
//* Model Builder version: 5.1.0
//* Generated on: Jul. 25, 2022 05:09:30 PM, (user: russk)
//*>




#include "conv_2d_model.h"
#include <math.h>
#include <stdlib.h>

using namespace esl::tlm_sim;
using namespace esl::sc_sim;
using namespace std;
using namespace sc_dt;
using namespace sc_core;




void conv_2d_t_base::schedule_axi_READ
(long port_index,
 sc_dt::uint64 delay,
 long& transactionSize,
 esl::include::transaction_power& power , long TR_ID, long ARADDR, long* RDATA, long ARSIZE, long block_size, long ARBURST, long ARLEN, long ARLOCK) {
  sc_dt::uint64 local_address = 0;
  local_address = ARADDR,
  scheduleGenericTransaction(port_index,
                             0,
                             local_address,
                             (unsigned char*)RDATA,
                             transactionSize,
                             block_size,
                             0, papoulis::getSimulationTime() + delay,
                             0,
                             0);
}



void conv_2d_t_base::schedule_axi_WRITE
(long port_index,
 sc_dt::uint64 delay,
 long& transactionSize,
 esl::include::transaction_power& power , long TR_ID, long AWADDR, long* WDATA, long AWSIZE, long block_size, long AWBURST, long AWLEN, long AWLOCK) {
  sc_dt::uint64 local_address = 0;
  local_address = AWADDR,
  scheduleGenericTransaction(port_index,
                             1,
                             local_address,
                             (unsigned char*)WDATA,
                             transactionSize,
                             block_size,
                             0, papoulis::getSimulationTime() + delay,
                             0,
                             0);
}



void conv_2d_t_base::schedule_signal_WRITE
(long port_index,
 sc_dt::uint64 delay,
 long& transactionSize,
 esl::include::transaction_power& power , long address, long* value_p, long block_size) {
  sc_dt::uint64 local_address = 0;
  local_address = address,
  scheduleGenericTransaction(port_index,
                             1,
                             local_address,
                             (unsigned char*)value_p,
                             transactionSize,
                             block_size,
                             0, papoulis::getSimulationTime() + delay,
                             0,
                             0);
}




void conv_2d_t_base::start_transaction_axi_READ
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();
  
  
  this->accept_axi_READ
    (port_index, 
     startTime, 
     burstSize, 
     parameters[0], 
     parameters[1], 
     parameters[2], 
     parameters[3], 
     parameters[4], 
     parameters[5], 
     parameters[6], 
     parameters[7]);
}


void conv_2d_t_base::end_transaction_axi_READ
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();                                                                         
  
  this->end_axi_READ
    (port_index,
     endTime,
     burstSize,
     parameters[0],
     parameters[1],
     parameters[2],
     parameters[3],
     parameters[4],
     parameters[5],
     parameters[6],
     parameters[7]);
}

void conv_2d_t_base::start_transaction_axi_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();
  
  
  this->accept_axi_WRITE
    (port_index, 
     startTime, 
     burstSize, 
     parameters[0], 
     parameters[1], 
     parameters[2], 
     parameters[3], 
     parameters[4], 
     parameters[5], 
     parameters[6], 
     parameters[7]);
}


void conv_2d_t_base::end_transaction_axi_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();                                                                         
  
  this->end_axi_WRITE
    (port_index,
     endTime,
     burstSize,
     parameters[0],
     parameters[1],
     parameters[2],
     parameters[3],
     parameters[4],
     parameters[5],
     parameters[6],
     parameters[7]);
}

void conv_2d_t_base::start_transaction_signal_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  
  long burstSize = request->getSize();
  parameters[0] = request->getAddress();
  parameters[1] = request->getFirstDataBlock();
  parameters[2] = request->getBlockSize();
  
  
  this->accept_signal_WRITE
    (port_index, 
     startTime, 
     burstSize, 
     parameters[0], 
     parameters[1], 
     parameters[2]);
}


void conv_2d_t_base::end_transaction_signal_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  long burstSize = request->getSize();
  parameters[0] = request->getAddress();
  parameters[1] = request->getFirstDataBlock();
  parameters[2] = request->getBlockSize();                                                                         
  
  this->end_signal_WRITE
    (port_index,
     endTime,
     burstSize,
     parameters[0],
     parameters[1],
     parameters[2]);
}

 conv_2d_t_base::TransactionCallbackFunctionPointer conv_2d_t_base::getTransactionCallback(unsigned callbackIndex) {
  static TransactionCallbackFunctionPointer funcArray[] = {
    static_cast<TransactionCallbackFunctionPointer>(&conv_2d_t_base::start_transaction_axi_READ),
    static_cast<TransactionCallbackFunctionPointer>(&conv_2d_t_base::start_transaction_axi_WRITE),
    static_cast<TransactionCallbackFunctionPointer>(&conv_2d_t_base::start_transaction_axi_READ),
    static_cast<TransactionCallbackFunctionPointer>(&conv_2d_t_base::start_transaction_axi_WRITE),
    static_cast<TransactionCallbackFunctionPointer>(&conv_2d_t_base::null_transaction_callback),
    static_cast<TransactionCallbackFunctionPointer>(&conv_2d_t_base::start_transaction_signal_WRITE),
    static_cast<TransactionCallbackFunctionPointer>(&conv_2d_t_base::end_transaction_axi_READ),
    static_cast<TransactionCallbackFunctionPointer>(&conv_2d_t_base::end_transaction_axi_WRITE),
    static_cast<TransactionCallbackFunctionPointer>(&conv_2d_t_base::end_transaction_axi_READ),
    static_cast<TransactionCallbackFunctionPointer>(&conv_2d_t_base::end_transaction_axi_WRITE),
    static_cast<TransactionCallbackFunctionPointer>(&conv_2d_t_base::null_transaction_callback),
    static_cast<TransactionCallbackFunctionPointer>(&conv_2d_t_base::end_transaction_signal_WRITE),
    0
  };
  if(callbackIndex >= sizeof(funcArray) / sizeof(*funcArray) - 1)
    return 0;
  return funcArray[callbackIndex];
}


config::real80 conv_2d_t_base::get_state_power() {
  config::real80 power_value = 0;

  

  return power_value;
}


conv_2d_t_base::conv_2d_t_base(sc_module_name& module_name, long simulation) :
  papoulis::SystemCBaseModel(module_name),
  SD_INITIALIZE_PARAMETER(clock, sc_core::sc_time(10, sc_core::SC_NS), "conv_2d"),
  SD_INITIALIZE_PARAMETER(signal_clock, clock, "conv_2d"),
  SD_INITIALIZE_PARAMETER(axi_clock, clock, "conv_2d"),
  SD_INITIALIZE_PARAMETER(nominal_voltage, 1, "conv_2d"),
  SD_INITIALIZE_PARAMETER(mb_debug, false, "conv_2d"),
  SD_INITIALIZE_PARAMETER(mb_debug_start_time, sc_core::sc_time(0, sc_core::SC_NS), "conv_2d"),
  SD_INITIALIZE_PARAMETER(mb_debug_end_time, sc_core::sc_time(0, sc_core::SC_NS), "conv_2d"),
  SD_INITIALIZE_PARAMETER(mb_debug_address_read, "0x10:0x0", "conv_2d"),
  SD_INITIALIZE_PARAMETER(mb_debug_address_write, "0x10:0x0", "conv_2d"),
  SD_INITIALIZE_PARAMETER(port_enable, true, "conv_2d"),
  SD_INITIALIZE_PARAMETER(call_to_default_if, false, "conv_2d"),
  SD_INITIALIZE_PARAMETER(verbose_parameters, true, "conv_2d"),
  SD_INITIALIZE_PARAMETER(dmi_enabled, true, "conv_2d"),
  SD_INITIALIZE_PARAMETER(warning_level, "WARNING", "conv_2d"),
  SD_INITIALIZE_PARAMETER(slave_pipeline_length, 2, "conv_2d"),
  SD_INITIALIZE_PARAMETER(slave_outstanding, 1, "conv_2d"),
  SD_INITIALIZE_PARAMETER(slave_read_data_queue_size, 0, "conv_2d"),
  SD_INITIALIZE_PARAMETER(slave_write_data_queue_size, 0, "conv_2d"),
  SD_INITIALIZE_PARAMETER(master_outstanding, 1, "conv_2d"),
  SD_INITIALIZE_PARAMETER(master_read_data_queue_size, 0, "conv_2d"),
  SD_INITIALIZE_PARAMETER(master_write_data_queue_size, 0, "conv_2d"),
  m_simulation(simulation),
  go("go", this),
  go_ready("go_ready", this),
  done("done", this),
  done_valid("done_valid", this),
  image("image", this),
  weights("weights", this),
  biases("biases", this),
  output_image("output_image", this),
  num_input_images("num_input_images", this),
  num_output_images("num_output_images", this),
  height("height", this),
  width("width", this),
  filter_height("filter_height", this),
  filter_width("filter_width", this),
  relu("relu", this),
  bias("bias", this),
  maxpool("maxpool", this)
{
  bool separate_read_channel = false;  
  bool separate_write_channel = false;
  char* buffer = 0;
  unsigned port_index = 0;
  
  fix_clock_parameter(axi_clock, "axi_clock");
    separate_read_channel = false;
    separate_write_channel = false;
    buffer = new char[15];
    sprintf(buffer, "slave");
    port_index = slave;
    port_descriptions[port_index].port_name = buffer;
    separate_read_channel = true;
    port_descriptions[port_index].port_kind = PortDescription::READ_CHANNEL_PORT;
    separate_write_channel = true;
    port_descriptions[port_index].port_kind = PortDescription::WRITE_CHANNEL_PORT;
    if (separate_write_channel && separate_read_channel)
      port_descriptions[port_index].port_kind = PortDescription::SEPARATE_READ_WRIE_CHANNEL_PORT;
    port_descriptions[port_index].is_read_write_address_channel = 0;
    
    port_descriptions[port_index].is_master_port = 0;
    port_descriptions[port_index].is_signal_port = 0;
    port_descriptions[port_index].port_width = ((32 + 7) >> 3);
    port_descriptions[port_index].port_cast  = 0;
    port_descriptions[port_index].port_width_in_bits = 32;
    port_descriptions[port_index].protocol_name = "axi";
    port_descriptions[port_index].ipxactBusDef.vendor = "amba.com";
    port_descriptions[port_index].ipxactBusDef.library = "AMBA3";
    port_descriptions[port_index].ipxactBusDef.name = "AXI";
    port_descriptions[port_index].ipxactBusDef.version = "r1p0_5"; 
    port_descriptions[port_index].ipxactAbstrDef.vendor = "Mentor.com";
    port_descriptions[port_index].ipxactAbstrDef.library = "Lib_ipxact";
    port_descriptions[port_index].ipxactAbstrDef.name = "AXI_tlm20";
    port_descriptions[port_index].ipxactAbstrDef.version = "1.0";
    port_descriptions[port_index].port_must_bind = 1;
    port_descriptions[port_index].params_count = 8 + 10;
    if (slave_outstanding == 0) {
      slave_outstanding = 1;
      printf("WARNING: in \"%s\" the \"slave_outstanding\" parameter is 0, a default value of 1 is used\n", name());
    }
    port_descriptions[port_index].pending = slave_outstanding;
    port_descriptions[port_index].read_data_queue_size = slave_read_data_queue_size;
    port_descriptions[port_index].write_data_queue_size = slave_write_data_queue_size;
    port_descriptions[port_index].clock = axi_clock;
    port_descriptions[port_index].add_read_phase(tlm::tlm_phase(tlm::BEGIN_REQ), !0, 0);
    port_descriptions[port_index].add_read_phase(tlm::tlm_phase(tlm::END_REQ), !1, 0);
    port_descriptions[port_index].add_read_phase(tlm::tlm_phase(tlm::BEGIN_RESP), !1, 1);
    port_descriptions[port_index].add_read_phase(tlm::tlm_phase(tlm::END_RESP), !0, 1);
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::BEGIN_REQ), !0, 0);
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::END_REQ), !1, 0);
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::BEGIN_RESP), !1, 1);
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::END_RESP), !0, 1);
  
  
  fix_clock_parameter(axi_clock, "axi_clock");
    separate_read_channel = false;
    separate_write_channel = false;
    buffer = new char[16];
    sprintf(buffer, "master");
    port_index = master;
    port_descriptions[port_index].port_name = buffer;
    separate_read_channel = true;
    port_descriptions[port_index].port_kind = PortDescription::READ_CHANNEL_PORT;
    separate_write_channel = true;
    port_descriptions[port_index].port_kind = PortDescription::WRITE_CHANNEL_PORT;
    if (separate_write_channel && separate_read_channel)
      port_descriptions[port_index].port_kind = PortDescription::SEPARATE_READ_WRIE_CHANNEL_PORT;
    port_descriptions[port_index].is_read_write_address_channel = 0;
    
    port_descriptions[port_index].is_master_port = 1;
    port_descriptions[port_index].is_signal_port = 0;
    port_descriptions[port_index].port_width = ((32 + 7) >> 3);
    port_descriptions[port_index].port_cast  = 0;
    port_descriptions[port_index].port_width_in_bits = 32;
    port_descriptions[port_index].protocol_name = "axi";
    port_descriptions[port_index].ipxactBusDef.vendor = "amba.com";
    port_descriptions[port_index].ipxactBusDef.library = "AMBA3";
    port_descriptions[port_index].ipxactBusDef.name = "AXI";
    port_descriptions[port_index].ipxactBusDef.version = "r1p0_5"; 
    port_descriptions[port_index].ipxactAbstrDef.vendor = "Mentor.com";
    port_descriptions[port_index].ipxactAbstrDef.library = "Lib_ipxact";
    port_descriptions[port_index].ipxactAbstrDef.name = "AXI_tlm20";
    port_descriptions[port_index].ipxactAbstrDef.version = "1.0";
    port_descriptions[port_index].port_must_bind = 1;
    port_descriptions[port_index].params_count = 8 + 10;
    if (master_outstanding == 0) {
      master_outstanding = 1;
      printf("WARNING: in \"%s\" the \"master_outstanding\" parameter is 0, a default value of 1 is used\n", name());
    }
    port_descriptions[port_index].pending = master_outstanding;
    port_descriptions[port_index].read_data_queue_size = master_read_data_queue_size;
    port_descriptions[port_index].write_data_queue_size = master_write_data_queue_size;
    port_descriptions[port_index].clock = axi_clock;
    port_descriptions[port_index].add_read_phase(tlm::tlm_phase(tlm::BEGIN_REQ), !1, 0);
    port_descriptions[port_index].add_read_phase(tlm::tlm_phase(tlm::END_REQ), !0, 0);
    port_descriptions[port_index].add_read_phase(tlm::tlm_phase(tlm::BEGIN_RESP), !0, 1);
    port_descriptions[port_index].add_read_phase(tlm::tlm_phase(tlm::END_RESP), !1, 1);
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::BEGIN_REQ), !1, 0);
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::END_REQ), !0, 0);
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::BEGIN_RESP), !0, 1);
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::END_RESP), !1, 1);
  
  
  fix_clock_parameter(signal_clock, "signal_clock");
    separate_read_channel = false;
    separate_write_channel = false;
    buffer = new char[17];
    sprintf(buffer, "int_out");
    port_index = int_out;
    port_descriptions[port_index].port_name = buffer;
    separate_write_channel = true;
    port_descriptions[port_index].port_kind = PortDescription::WRITE_CHANNEL_PORT;
    if (separate_write_channel && separate_read_channel)
      port_descriptions[port_index].port_kind = PortDescription::SEPARATE_READ_WRIE_CHANNEL_PORT;
    port_descriptions[port_index].is_read_write_address_channel = 0;
    
    port_descriptions[port_index].is_master_port = 1;
    port_descriptions[port_index].is_signal_port = 1;
    port_descriptions[port_index].port_width = ((1 + 7) >> 3);
    port_descriptions[port_index].port_cast  = 0;
    port_descriptions[port_index].port_width_in_bits = 1;
    port_descriptions[port_index].protocol_name = "signal";
    port_descriptions[port_index].ipxactBusDef.vendor = "Mentor.com";
    port_descriptions[port_index].ipxactBusDef.library = "Lib_ipxact";
    port_descriptions[port_index].ipxactBusDef.name = "signal";
    port_descriptions[port_index].ipxactBusDef.version = "1.0"; 
    port_descriptions[port_index].ipxactAbstrDef.vendor = "Mentor.com";
    port_descriptions[port_index].ipxactAbstrDef.library = "Lib_ipxact";
    port_descriptions[port_index].ipxactAbstrDef.name = "signal_tlm20";
    port_descriptions[port_index].ipxactAbstrDef.version = "1.0";
    port_descriptions[port_index].port_must_bind = 0;
    port_descriptions[port_index].params_count = 3 + 10;
    port_descriptions[port_index].clock = signal_clock;
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::BEGIN_REQ), !1, 1);
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::BEGIN_RESP), !0, 1);
  

  port_descriptions[slave].default_read_transaction_name = "READ";
  
  port_descriptions[master].default_read_transaction_name = "READ";
  
  port_descriptions[slave].default_write_transaction_name = "WRITE";
  
  port_descriptions[master].default_write_transaction_name = "WRITE";
  
  port_descriptions[int_out].default_write_transaction_name = "WRITE";
  

  fix_internal_clock_parameter(clock, "clock");
  set_ports(mb::sysc::sc_time_to_ps(clock), port_count, port_descriptions);

  bool isCpu = false;
  
  esl::tlm_sim::UserRunningModel* userRunningModel = Papoulis_CreateUserRunningModel(name(),
                                                                                     0,
                                                                                     this,
                                                                                     simulation,
                                                                                     false,
                                                                                     isCpu);
  setUserRunningModel(userRunningModel, isCpu);
  set_nominal_voltage(nominal_voltage);
  registerParameter("clock", "sc_core::sc_time", sdGetParameterAsConstString("clock"));
  registerParameter("signal_clock", "sc_core::sc_time", sdGetParameterAsConstString("signal_clock"));
  registerParameter("axi_clock", "sc_core::sc_time", sdGetParameterAsConstString("axi_clock"));
  registerParameter("nominal_voltage", "double", sdGetParameterAsConstString("nominal_voltage"));
  registerParameter("mb_debug", "bool", sdGetParameterAsConstString("mb_debug"));
  registerParameter("mb_debug_start_time", "sc_core::sc_time", sdGetParameterAsConstString("mb_debug_start_time"));
  registerParameter("mb_debug_end_time", "sc_core::sc_time", sdGetParameterAsConstString("mb_debug_end_time"));
  registerParameter("mb_debug_address_read", "const char*", sdGetParameterAsConstString("mb_debug_address_read"));
  registerParameter("mb_debug_address_write", "const char*", sdGetParameterAsConstString("mb_debug_address_write"));
  registerParameter("port_enable", "bool", sdGetParameterAsConstString("port_enable"));
  registerParameter("call_to_default_if", "bool", sdGetParameterAsConstString("call_to_default_if"));
  registerParameter("verbose_parameters", "bool", sdGetParameterAsConstString("verbose_parameters"));
  registerParameter("dmi_enabled", "bool", sdGetParameterAsConstString("dmi_enabled"));
  registerParameter("warning_level", "const char*", sdGetParameterAsConstString("warning_level"));
  registerParameter("slave_pipeline_length", "unsigned int", sdGetParameterAsConstString("slave_pipeline_length"));
  registerParameter("slave_outstanding", "unsigned int", sdGetParameterAsConstString("slave_outstanding"));
  registerParameter("slave_read_data_queue_size", "unsigned int", sdGetParameterAsConstString("slave_read_data_queue_size"));
  registerParameter("slave_write_data_queue_size", "unsigned int", sdGetParameterAsConstString("slave_write_data_queue_size"));
  registerParameter("master_outstanding", "unsigned int", sdGetParameterAsConstString("master_outstanding"));
  registerParameter("master_read_data_queue_size", "unsigned int", sdGetParameterAsConstString("master_read_data_queue_size"));
  registerParameter("master_write_data_queue_size", "unsigned int", sdGetParameterAsConstString("master_write_data_queue_size"));
  set_sync_all(0); 
  
  
  
  
  

  
  

  


  

  constant_global_power_policy* p = new constant_global_power_policy(userRunningModel);
  
  
  
  set_global_power_policy(p);
}


void conv_2d_t_base::update_sync_all() {
  set_sync_all(0);
  
}


void conv_2d_t_base::update_pipeline_parameters(esl::sc_sim::pipeline_policy* handle) {
  if (m_pipeline_vector.size() == 0)
    return;


}


void conv_2d_t_base::update_sequential_parameters(esl::sc_sim::sequential_policy* handle) {
  if (m_sequential_vector.size() == 0)
    return;

}


void conv_2d_t_base::update_delay_parameters(esl::sc_sim::delay_policy* handle) {
  if (m_delay_vector.size() == 0)
    return;

}


void conv_2d_t_base::update_bus_parameters(esl::sc_sim::uniform_bus_policy* handle) {
  if (m_bus_vector.size() == 0)
    return;

}


void conv_2d_t_base::update_power_parameters(esl::sc_sim::power_policy* handle) {
  if (m_power_vector.size() == 0)
    return;

}


void conv_2d_t_base::update_state_power_parameters(esl::sc_sim::state_power_policy* handle) {
  if (m_state_power_vector.size() == 0)
    return;

}


void conv_2d_t_base::update_global_power_parameters(esl::sc_sim::constant_global_power_policy* handle) {
  
  
  return;  
}


bool conv_2d_t_base::triggerRegistersGotHit(unsigned portIndex, tlm::tlm_generic_payload& trans) {
  mb::utl::Segment<uint64_t> transactionRange(trans.get_address(), trans.get_address() + trans.get_data_length());

  {
    if (0 == portIndex) {
      mb::utl::Segment<uint64_t> current((1 + ((0 % 4) << 3)), (1 + ((0 % 4) << 3)));
      mb::utl::Segment<uint64_t> intersect = transactionRange.intersect(current);
      if (!intersect.empty())
        return true;
    }
  }
  return false;
}


bool conv_2d_t_base::portHasRegisters(unsigned portIndex) {
  switch (portIndex) {

    {
    case 0:
      return true;
    }
  }
  return false;
}




unsigned conv_2d_t_base::getPortCountForRegister(unsigned regIndex) {
  if (!strcmp(get_register_name(regIndex), "go"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "go_ready"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "done"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "done_valid"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "image"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "weights"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "biases"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "output_image"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "num_input_images"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "num_output_images"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "height"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "width"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "filter_height"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "filter_width"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "relu"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "bias"))
    return 1;
  if (!strcmp(get_register_name(regIndex), "maxpool"))
    return 1;
  return 0;
}


void conv_2d_t_base::getPortNamesForRegister(unsigned regIndex, const char **names) {
  long i = 0;
  if (!strcmp(get_register_name(regIndex), "go")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "go_ready")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "done")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "done_valid")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "image")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "weights")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "biases")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "output_image")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "num_input_images")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "num_output_images")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "height")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "width")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "filter_height")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "filter_width")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "relu")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "bias")) {
    names[i++] = "slave";
    return;
  }
  if (!strcmp(get_register_name(regIndex), "maxpool")) {
    names[i++] = "slave";
    return;
  }
}


/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected.
//* DO NOT MODIFY THIS FILE.
//*
//* This file contains the PVT class for conv_2d.
//* It connects between the PV and T models.
//* Your top-level design should instantiate this model.
//* 
//* In order to synchronize the activty between the PV and the T models, every 
//* PV transaction is monitored and queued in the T sync ports.
//* Whenever a synchronization point is reached, the T models are executed and 
//* the corresponding T transactions are launched.
//* A synchronization point is reached whenever there is a wait statement on a testbench thread. 
//*
//* Model Builder version: 5.1.0
//* Generated on: Jul. 25, 2022 05:09:30 PM, (user: russk)
//*>

#include "conv_2d_model.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;



#include "conv_2d_pv.h"




// Constructor

conv_2d_pvt::conv_2d_pvt(sc_module_name module_name)
  : esl::sc_sim::PVTBaseModel(module_name, 0),
    conv_2d_pvt_param_defaults(this->name()),
    master("master"),
    slave("slave"),
    int_out("int_out"),
    master_entry("unvisible_master_entry"),
    slave_entry("unvisible_slave_entry")
  

  ,m_master_nb_connector(*this)
  ,m_int_out_nb_connector(*this),
    m_slave_nb_connector(*this)
  
    

{
  // master - not a vector port
  // slave - not a vector port

  // int_out - not a vector signal


  m_conv_2d_t = conv_2d_t_base::create_t("T", 1);
  m_conv_2d_pv = new conv_2d_pv("PV");
  bind();
}  


conv_2d_pvt::conv_2d_pvt(sc_module_name module_name, sc_core::sc_time clock_init, sc_core::sc_time signal_clock_init, sc_core::sc_time axi_clock_init, double nominal_voltage_init, bool mb_debug_init, sc_core::sc_time mb_debug_start_time_init, sc_core::sc_time mb_debug_end_time_init, const char* mb_debug_address_read_init, const char* mb_debug_address_write_init, bool port_enable_init, bool call_to_default_if_init, bool verbose_parameters_init, bool dmi_enabled_init, const char* warning_level_init, unsigned int slave_pipeline_length_init, unsigned int slave_outstanding_init, unsigned int slave_read_data_queue_size_init, unsigned int slave_write_data_queue_size_init, unsigned int master_outstanding_init, unsigned int master_read_data_queue_size_init, unsigned int master_write_data_queue_size_init)
  : esl::sc_sim::PVTBaseModel(module_name, 0),
  conv_2d_pvt_param_defaults(this->name(), clock_init, signal_clock_init, axi_clock_init, nominal_voltage_init, mb_debug_init, mb_debug_start_time_init, mb_debug_end_time_init, mb_debug_address_read_init, mb_debug_address_write_init, port_enable_init, call_to_default_if_init, verbose_parameters_init, dmi_enabled_init, warning_level_init, slave_pipeline_length_init, slave_outstanding_init, slave_read_data_queue_size_init, slave_write_data_queue_size_init, master_outstanding_init, master_read_data_queue_size_init, master_write_data_queue_size_init),
    master("master"),
    slave("slave"),
    int_out("int_out"),
    master_entry("unvisible_master_entry"),
    slave_entry("unvisible_slave_entry")
    

    ,m_master_nb_connector(*this)
    ,m_int_out_nb_connector(*this),
    m_slave_nb_connector(*this)
    
    
{

  // master - not a vector port
  // slave - not a vector port
  // int_out - not a vector signal
  


  m_conv_2d_t = conv_2d_t_base::create_t("T", 1);
  m_conv_2d_pv = new conv_2d_pv("PV");
  bind();
} 


conv_2d_pvt::conv_2d_pvt(sc_module_name module_name,  std::vector<std::pair<char*, unsigned int> > &change_parameters)
  : esl::sc_sim::PVTBaseModel(module_name, 0),
  conv_2d_pvt_param_defaults(this->name(), change_parameters),
    master("master"),
    slave("slave"),
    int_out("int_out"),
    master_entry("unvisible_master_entry"),
    slave_entry("unvisible_slave_entry")
    

    ,m_master_nb_connector(*this)
    ,m_int_out_nb_connector(*this),
    m_slave_nb_connector(*this)
    
{

  // master - not a vector port
  // slave - not a vector port
  


  m_conv_2d_t = conv_2d_t_base::create_t("T", 1);
  m_conv_2d_pv = new conv_2d_pv("PV");
  bind();
} 


conv_2d_pvt::~conv_2d_pvt() {
  remove_pending_scenes();
  
  delete m_conv_2d_t;
  
  delete m_conv_2d_pv;
}





void conv_2d_pvt::bind()
{
  /* connect pv to entry ports */
  
  
  getPV()->master.bind(master_entry);
  slave_entry.bind(getPV()->slave); 
  getPV()->int_out.bind(int_out_entry);  

  /* set callbacks on external and entry ports */ 

  slave.b_transport_cb.set(&slave_entry, &slave_entry_type::b_transport);
  slave.transport_dbg_cb.set(&slave_entry, &slave_entry_type::transport_dbg);
  slave.get_direct_mem_ptr_cb.set(&slave_entry, &slave_entry_type::get_direct_mem_ptr);
  
  master_entry.b_transport_cb.set(this, &self_type::b_transport_outside_master);
  master_entry.transport_dbg_cb.set(this, &self_type::transport_dbg_outside_master);
  master_entry.get_direct_mem_ptr_cb.set(&master, &master_type::get_direct_mem_ptr);
  
  int_out_entry.write_cb.set(this, &self_type::b_transport_outside_int_out);
  

  
  /* connect t non blocking callbacks */

  master.nb_transport_bw_cb.set(this, &self_type::receive_nb_transport_master);
  getT()->set_port_cb(1, &m_master_nb_connector);
  
  int_out.nb_transport_bw_cb.set(this, &self_type::receive_nb_transport_int_out);
  getT()->set_port_cb(2, &m_int_out_nb_connector);
  
  slave.nb_transport_fw_cb.set(this, &self_type::receive_nb_transport_slave);
  getT()->set_port_cb(0, &m_slave_nb_connector);
  
  slave_entry.invalidate_direct_mem_ptr_cb.set(&slave, &slave_type::invalidate_direct_mem_ptr);

  master.invalidate_direct_mem_ptr_cb.set(&master_entry, &master_entry_type::invalidate_direct_mem_ptr);
  
  /* check mb_event policies */
  m_conv_2d_t->check_mb_events();
  
}




void conv_2d_pvt::b_transport_outside_master(tlm::tlm_generic_payload& p, sc_core::sc_time& t)
{
  
  master.b_transport(p, t); 
} 


unsigned int conv_2d_pvt::transport_dbg_outside_master(tlm::tlm_generic_payload& p)
{
  

  return master.transport_dbg(p); 
}


void
conv_2d_pvt::b_transport_outside_int_out(bool data)
{
  static tlm::tlm_generic_payload payload;

  payload.reset();
  payload.set_command(tlm::TLM_WRITE_COMMAND);
  payload.set_data_ptr((unsigned char*)&data);
  payload.set_data_length(sizeof(bool));
  payload.set_streaming_width(sizeof(bool));

  mb::tlm20::clear_pvt_ext(payload);
  mb::tlm20::setup_pvt_ext(payload)->set_signal(true);

  if (!int_out.get_interface()) {
    return ;
  }

  mb::mb_module* current_model = dynamic_cast<mb::mb_module*>(m_conv_2d_pv);
  if (current_model)
    mb::tlm20::setup_pvt_ext(payload)->setToken(current_model->get_current_token());
  sc_time t; 
  int_out.b_transport(payload, t); 
}




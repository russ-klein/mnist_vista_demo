
/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* This class contains the infrastructure to define the behavior of the component.
//* The axi_bus_pv will be derived from this class.
//*
//* Model Builder version: 5.1.0
//* Generated on: Mar. 09, 2022 11:24:25 AM, (user: russk)
//*>



#pragma once

#include "model_builder.h"

#ifdef MODEL_BUILDER_VERSION_NUMBER
#if 5100 != MODEL_BUILDER_VERSION_NUMBER
#error "This model was generated using Model Builder version: 5.1.0. Please regenerate model."
#endif
#else
#error "Please regenerate model."
#endif




#include "axi_protocol.h"

using namespace ::tlm;

class axi_bus_pv_base_parameters {
 public :
  axi_bus_pv_base_parameters(sc_object* object);
  void print_parameters();

 protected:
  sc_object* m_object;

  sc_core::sc_time clock;
  sc_core::sc_time axi_clock;
  double nominal_voltage;
  bool port_enable;
  bool verbose_parameters;
  bool dmi_enabled;
  const char* warning_level;
  const char* layers;
  const char* slave_sets;
  unsigned int write_broadcast;
  unsigned int dma_slave_priority;
  unsigned long long dma_slave_base_address;
  unsigned long long dma_slave_size;
  unsigned int dma_slave_subtract_base_address;
  unsigned int dma_slave_secure;
  const char* dma_slave_additional_ranges;
  unsigned int dma_slave_latency;
  unsigned int mem_slave_priority;
  unsigned long long mem_slave_base_address;
  unsigned long long mem_slave_size;
  unsigned int mem_slave_subtract_base_address;
  unsigned int mem_slave_secure;
  const char* mem_slave_additional_ranges;
  unsigned int mem_slave_latency;
  unsigned int cpu_master_priority;
  const char* cpu_master_vmap;
  unsigned int dma_master_priority;
  const char* dma_master_vmap;
  unsigned int code_and_data_priority;
  unsigned long long code_and_data_base_address;
  unsigned long long code_and_data_size;
  unsigned int code_and_data_subtract_base_address;
  unsigned int code_and_data_secure;
  const char* code_and_data_additional_ranges;
  unsigned int code_and_data_latency;
  unsigned int console_priority;
  unsigned long long console_base_address;
  unsigned long long console_size;
  unsigned int console_subtract_base_address;
  unsigned int console_secure;
  const char* console_additional_ranges;
  unsigned int console_latency;
};




class axi_bus_pv_base;


class axi_bus_pv_base_mb_compatibility : public mb::mb_module {
  friend class axi_bus_pv_base;
 public:
  typedef unsigned int mb_address_type;
 protected:
  axi_bus_pv_base_mb_compatibility(sc_core::sc_module_name& module_name)
    : mb::mb_module(module_name) {}

  ////////////////////////////////////////
  // functions for target port: cpu_master
  ////////////////////////////////////////
  protected:
   virtual bool cpu_master_callback_read(mb_address_type address,
                                                      unsigned char* data,
                                                      unsigned size) {
     return true;
   } 
   virtual bool cpu_master_callback_write(mb_address_type address,
                                                       unsigned char* data,
                                                       unsigned size) {
     return true;
   } 
   virtual unsigned cpu_master_callback_read_dbg(mb_address_type address,
                                                              unsigned char* data,
                                                              unsigned size) {
     return 0;
   } 
   virtual unsigned cpu_master_callback_write_dbg(mb_address_type address,
                                                               unsigned char* data,
                                                               unsigned size) {
     return 0;
   }
   virtual bool cpu_master_get_direct_memory_ptr(mb_address_type address,
                                                              tlm::tlm_dmi& dmiData) {
     return false;
   }
   virtual bool cpu_master_enable() {
     return cpu_master_set_enable(true);
   }
   virtual bool cpu_master_disable() {
     return cpu_master_set_enable(false);
   }
   virtual bool cpu_master_set_enable(bool enable) {
     string port_path = mb::tlm20::remove_pv(sc_core::sc_object::name()) + + ".cpu_master";
     esl::sc_sim::pvt_port_connect* pvt_port = dynamic_cast<esl::sc_sim::pvt_port_connect*>(sc_find_object(port_path.c_str()));
     if(!pvt_port) {
       return false;
     }
     (dynamic_cast<mb::utl::ExternalAccess*>(pvt_port))->external_enable(enable);
     return true;
   }
  ////////////////////////////////////////
  // functions for target port: dma_master
  ////////////////////////////////////////
  protected:
   virtual bool dma_master_callback_read(mb_address_type address,
                                                      unsigned char* data,
                                                      unsigned size) {
     return true;
   } 
   virtual bool dma_master_callback_write(mb_address_type address,
                                                       unsigned char* data,
                                                       unsigned size) {
     return true;
   } 
   virtual unsigned dma_master_callback_read_dbg(mb_address_type address,
                                                              unsigned char* data,
                                                              unsigned size) {
     return 0;
   } 
   virtual unsigned dma_master_callback_write_dbg(mb_address_type address,
                                                               unsigned char* data,
                                                               unsigned size) {
     return 0;
   }
   virtual bool dma_master_get_direct_memory_ptr(mb_address_type address,
                                                              tlm::tlm_dmi& dmiData) {
     return false;
   }
   virtual bool dma_master_enable() {
     return dma_master_set_enable(true);
   }
   virtual bool dma_master_disable() {
     return dma_master_set_enable(false);
   }
   virtual bool dma_master_set_enable(bool enable) {
     string port_path = mb::tlm20::remove_pv(sc_core::sc_object::name()) + + ".dma_master";
     esl::sc_sim::pvt_port_connect* pvt_port = dynamic_cast<esl::sc_sim::pvt_port_connect*>(sc_find_object(port_path.c_str()));
     if(!pvt_port) {
       return false;
     }
     (dynamic_cast<mb::utl::ExternalAccess*>(pvt_port))->external_enable(enable);
     return true;
   }
};


class axi_bus_pv_base : public axi_bus_pv_base_mb_compatibility,
                           public axi_bus_pv_base_parameters
{
  
private:
  typedef axi_bus_pv_base_mb_compatibility mb_compatibility_class;
  typedef axi_bus_pv_base_mb_compatibility BASE_TYPE;
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  typedef axi_bus_pv_base self;
  SC_HAS_PROCESS(axi_bus_pv_base);
  axi_bus_pv_base(sc_core::sc_module_name& module_name);
  ~axi_bus_pv_base();
  virtual void reset_registers();
  virtual void reset_model();
  enum port_enum {dma_slave_idx = 0,mem_slave_idx = 1,cpu_master_idx = 2,dma_master_idx = 3,code_and_data_idx = 4,console_idx = 5 };
 private:  
  template <class DATATYPE>
  void allocate_in_memory(mb::mb_register<DATATYPE>* regVec, mb::mb_memory_b& memObj, unsigned int regSize) {
    unsigned u = 0;
    while(u < regSize) {
      regVec[u].allocate_in_memory(&memObj);
      u++;
    }
  }

 protected:

  mb::tlm20::bw_process<tlm::tlm_base_protocol_types> m_dma_slave_bw_process;
  mb::tlm20::bw_process<tlm::tlm_base_protocol_types> m_mem_slave_bw_process;
  mb::tlm20::bw_process<tlm::tlm_base_protocol_types> m_code_and_data_bw_process;
  mb::tlm20::bw_process<tlm::tlm_base_protocol_types> m_console_bw_process;
  mb::tlm20::fw_process<tlm::tlm_base_protocol_types> m_cpu_master_fw_process;
  mb::tlm20::fw_process<tlm::tlm_base_protocol_types> m_dma_master_fw_process;
  

 protected:

  virtual void cpu_master_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t) {
    bool status;

    if (trans.get_byte_enable_ptr() && trans.get_byte_enable_length()) {
      std::stringstream str;
      str << std::showbase << std::hex;
      if (trans.is_write())
        str << "writing to address " << trans.get_address() << " : byte enable pointer defined but not used ";
      else
        str << "reading from address " << trans.get_address() << " : byte enable pointer defined but not used ";
      mb::sysc::complain(str.str().c_str(), this->name());
    }
    payload_for_token = &trans;
    
    if (trans.is_write()) {
      status = cpu_master_callback_write(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else if (trans.is_read()) {
      status = cpu_master_callback_read(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else {
      status = false;
    }
    payload_for_token = 0;

    tlm::tlm_response_status trans_status = trans.get_response_status();
    if (trans_status == tlm::TLM_INCOMPLETE_RESPONSE ||
        trans_status == tlm::TLM_OK_RESPONSE)
      trans.set_response_status(status ? TLM_OK_RESPONSE : TLM_GENERIC_ERROR_RESPONSE);
  }

  virtual unsigned cpu_master_callback_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    
    unsigned status = 0;
    if (trans.is_write()) {
      status = cpu_master_callback_write_dbg(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else if (trans.is_read()) {
      status = cpu_master_callback_read_dbg(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } 

    return status;
  }

  virtual bool cpu_master_get_direct_memory_ptr_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans,
                                                                      tlm::tlm_dmi& dmiData) {
    if (trans.get_command() == tlm::TLM_IGNORE_COMMAND)
      return false;
    payload_on_stack = &trans;
    bool ret_value = cpu_master_get_direct_memory_ptr(trans.get_address(), dmiData);
    if (ret_value) {
      get_dmi_delay_cb(trans, dmiData, cpu_master_idx);
    }
    payload_on_stack = 0;
    return ret_value;
  }
  virtual void dma_master_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t) {
    bool status;

    if (trans.get_byte_enable_ptr() && trans.get_byte_enable_length()) {
      std::stringstream str;
      str << std::showbase << std::hex;
      if (trans.is_write())
        str << "writing to address " << trans.get_address() << " : byte enable pointer defined but not used ";
      else
        str << "reading from address " << trans.get_address() << " : byte enable pointer defined but not used ";
      mb::sysc::complain(str.str().c_str(), this->name());
    }
    payload_for_token = &trans;
    
    if (trans.is_write()) {
      status = dma_master_callback_write(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else if (trans.is_read()) {
      status = dma_master_callback_read(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else {
      status = false;
    }
    payload_for_token = 0;

    tlm::tlm_response_status trans_status = trans.get_response_status();
    if (trans_status == tlm::TLM_INCOMPLETE_RESPONSE ||
        trans_status == tlm::TLM_OK_RESPONSE)
      trans.set_response_status(status ? TLM_OK_RESPONSE : TLM_GENERIC_ERROR_RESPONSE);
  }

  virtual unsigned dma_master_callback_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    
    unsigned status = 0;
    if (trans.is_write()) {
      status = dma_master_callback_write_dbg(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else if (trans.is_read()) {
      status = dma_master_callback_read_dbg(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } 

    return status;
  }

  virtual bool dma_master_get_direct_memory_ptr_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans,
                                                                      tlm::tlm_dmi& dmiData) {
    if (trans.get_command() == tlm::TLM_IGNORE_COMMAND)
      return false;
    payload_on_stack = &trans;
    bool ret_value = dma_master_get_direct_memory_ptr(trans.get_address(), dmiData);
    if (ret_value) {
      get_dmi_delay_cb(trans, dmiData, dma_master_idx);
    }
    payload_on_stack = 0;
    return ret_value;
  }

  virtual void get_dmi_delay_cb(tlm::tlm_generic_payload& trans, tlm::tlm_dmi& dmiData, unsigned port_index) {
    sc_time t = sc_core::SC_ZERO_TIME;
    
    esl::sc_sim::pvt_connect::getPVTBaseModel()->get_write_delay_for_dmi(port_index, trans, t);
    dmiData.set_write_latency(t);
    t = sc_core::SC_ZERO_TIME;
    esl::sc_sim::pvt_connect::getPVTBaseModel()->get_read_delay_for_dmi(port_index, trans, t);
    dmiData.set_read_latency(t);
    
  }

  virtual void invalidate_direct_mem_ptr_callback(unsigned master_index, sc_dt::uint64 start_range, sc_dt::uint64 end_range) {
  }
  virtual void dma_slave_invalidate_direct_mem_ptr_callback(sc_dt::uint64 start_range, sc_dt::uint64 end_range) {
  }
  virtual void mem_slave_invalidate_direct_mem_ptr_callback(sc_dt::uint64 start_range, sc_dt::uint64 end_range) {
  }
  virtual void code_and_data_invalidate_direct_mem_ptr_callback(sc_dt::uint64 start_range, sc_dt::uint64 end_range) {
  }
  virtual void console_invalidate_direct_mem_ptr_callback(sc_dt::uint64 start_range, sc_dt::uint64 end_range) {
  }

  

  



  

  
  

 public:

  ////////////////////////////////////////
  // functions for initiator port: dma_slave
  ////////////////////////////////////////
  virtual bool dma_slave_enable() {
    return dma_slave_set_enable(true);
  }
  virtual bool dma_slave_disable() {
    return dma_slave_set_enable(false);
  }
  virtual bool dma_slave_set_enable(bool enable) {
    string port_path = mb::tlm20::remove_pv(sc_core::sc_object::name()) + + ".dma_slave";
    esl::sc_sim::pvt_port_connect* pvt_port = dynamic_cast<esl::sc_sim::pvt_port_connect*>(sc_find_object(port_path.c_str()));
    if(!pvt_port) {
      return false;
    }
    (dynamic_cast<mb::utl::ExternalAccess*>(pvt_port))->external_enable(enable);
    return true;
  }
  virtual void dma_slave_b_transport(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t) {
    trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    dma_slave->b_transport(trans, t);
  }

  virtual unsigned int dma_slave_transport_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    return dma_slave->transport_dbg(trans);
  }
  bool dma_slave_transport(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    sc_core::sc_time t;
    trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    dma_slave->b_transport(trans, t);
    return trans.get_response_status() == tlm::TLM_OK_RESPONSE;
  }

   
  bool dma_slave_read(mb_address_type address, unsigned char* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool dma_slave_read(mb_address_type address, unsigned short* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool dma_slave_read(mb_address_type address, unsigned int* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool dma_slave_read(mb_address_type address, sc_dt::uint64* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool dma_slave_read(mb_address_type address, char* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool dma_slave_read(mb_address_type address, short* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool dma_slave_read(mb_address_type address, int* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool dma_slave_read(mb_address_type address, sc_dt::int64* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  }   
  
  bool dma_slave_write(mb_address_type address,unsigned char* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool dma_slave_write(mb_address_type address,unsigned short* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool dma_slave_write(mb_address_type address,unsigned int* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool dma_slave_write(mb_address_type address,sc_dt::uint64* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool dma_slave_write(mb_address_type address,char* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool dma_slave_write(mb_address_type address,short* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool dma_slave_write(mb_address_type address,int* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool dma_slave_write(mb_address_type address,sc_dt::int64* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  }  

  bool dma_slave_read(mb_address_type address,unsigned char& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool dma_slave_read(mb_address_type address,unsigned short& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool dma_slave_read(mb_address_type address,unsigned int& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool dma_slave_read(mb_address_type address,sc_dt::uint64& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool dma_slave_read(mb_address_type address,char& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool dma_slave_read(mb_address_type address,short& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool dma_slave_read(mb_address_type address,int& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool dma_slave_read(mb_address_type address,sc_dt::int64& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }  
  
  bool dma_slave_write(mb_address_type address,unsigned char data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool dma_slave_write(mb_address_type address,unsigned short data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool dma_slave_write(mb_address_type address,unsigned int data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool dma_slave_write(mb_address_type address,sc_dt::uint64 data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool dma_slave_write(mb_address_type address,char data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool dma_slave_write(mb_address_type address,short data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool dma_slave_write(mb_address_type address,int data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool dma_slave_write(mb_address_type address,sc_dt::int64 data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  } 

  ////////////////////////////////////////
  // functions for initiator port: mem_slave
  ////////////////////////////////////////
  virtual bool mem_slave_enable() {
    return mem_slave_set_enable(true);
  }
  virtual bool mem_slave_disable() {
    return mem_slave_set_enable(false);
  }
  virtual bool mem_slave_set_enable(bool enable) {
    string port_path = mb::tlm20::remove_pv(sc_core::sc_object::name()) + + ".mem_slave";
    esl::sc_sim::pvt_port_connect* pvt_port = dynamic_cast<esl::sc_sim::pvt_port_connect*>(sc_find_object(port_path.c_str()));
    if(!pvt_port) {
      return false;
    }
    (dynamic_cast<mb::utl::ExternalAccess*>(pvt_port))->external_enable(enable);
    return true;
  }
  virtual void mem_slave_b_transport(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t) {
    trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    mem_slave->b_transport(trans, t);
  }

  virtual unsigned int mem_slave_transport_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    return mem_slave->transport_dbg(trans);
  }
  bool mem_slave_transport(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    sc_core::sc_time t;
    trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    mem_slave->b_transport(trans, t);
    return trans.get_response_status() == tlm::TLM_OK_RESPONSE;
  }

   
  bool mem_slave_read(mb_address_type address, unsigned char* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool mem_slave_read(mb_address_type address, unsigned short* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool mem_slave_read(mb_address_type address, unsigned int* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool mem_slave_read(mb_address_type address, sc_dt::uint64* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool mem_slave_read(mb_address_type address, char* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool mem_slave_read(mb_address_type address, short* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool mem_slave_read(mb_address_type address, int* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool mem_slave_read(mb_address_type address, sc_dt::int64* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  }   
  
  bool mem_slave_write(mb_address_type address,unsigned char* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool mem_slave_write(mb_address_type address,unsigned short* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool mem_slave_write(mb_address_type address,unsigned int* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool mem_slave_write(mb_address_type address,sc_dt::uint64* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool mem_slave_write(mb_address_type address,char* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool mem_slave_write(mb_address_type address,short* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool mem_slave_write(mb_address_type address,int* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool mem_slave_write(mb_address_type address,sc_dt::int64* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  }  

  bool mem_slave_read(mb_address_type address,unsigned char& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool mem_slave_read(mb_address_type address,unsigned short& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool mem_slave_read(mb_address_type address,unsigned int& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool mem_slave_read(mb_address_type address,sc_dt::uint64& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool mem_slave_read(mb_address_type address,char& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool mem_slave_read(mb_address_type address,short& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool mem_slave_read(mb_address_type address,int& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool mem_slave_read(mb_address_type address,sc_dt::int64& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }  
  
  bool mem_slave_write(mb_address_type address,unsigned char data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool mem_slave_write(mb_address_type address,unsigned short data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool mem_slave_write(mb_address_type address,unsigned int data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool mem_slave_write(mb_address_type address,sc_dt::uint64 data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool mem_slave_write(mb_address_type address,char data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool mem_slave_write(mb_address_type address,short data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool mem_slave_write(mb_address_type address,int data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool mem_slave_write(mb_address_type address,sc_dt::int64 data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  } 

  ////////////////////////////////////////
  // functions for initiator port: code_and_data
  ////////////////////////////////////////
  virtual bool code_and_data_enable() {
    return code_and_data_set_enable(true);
  }
  virtual bool code_and_data_disable() {
    return code_and_data_set_enable(false);
  }
  virtual bool code_and_data_set_enable(bool enable) {
    string port_path = mb::tlm20::remove_pv(sc_core::sc_object::name()) + + ".code_and_data";
    esl::sc_sim::pvt_port_connect* pvt_port = dynamic_cast<esl::sc_sim::pvt_port_connect*>(sc_find_object(port_path.c_str()));
    if(!pvt_port) {
      return false;
    }
    (dynamic_cast<mb::utl::ExternalAccess*>(pvt_port))->external_enable(enable);
    return true;
  }
  virtual void code_and_data_b_transport(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t) {
    trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    code_and_data->b_transport(trans, t);
  }

  virtual unsigned int code_and_data_transport_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    return code_and_data->transport_dbg(trans);
  }
  bool code_and_data_transport(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    sc_core::sc_time t;
    trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    code_and_data->b_transport(trans, t);
    return trans.get_response_status() == tlm::TLM_OK_RESPONSE;
  }

   
  bool code_and_data_read(mb_address_type address, unsigned char* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool code_and_data_read(mb_address_type address, unsigned short* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool code_and_data_read(mb_address_type address, unsigned int* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool code_and_data_read(mb_address_type address, sc_dt::uint64* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool code_and_data_read(mb_address_type address, char* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool code_and_data_read(mb_address_type address, short* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool code_and_data_read(mb_address_type address, int* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool code_and_data_read(mb_address_type address, sc_dt::int64* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  }   
  
  bool code_and_data_write(mb_address_type address,unsigned char* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool code_and_data_write(mb_address_type address,unsigned short* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool code_and_data_write(mb_address_type address,unsigned int* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool code_and_data_write(mb_address_type address,sc_dt::uint64* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool code_and_data_write(mb_address_type address,char* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool code_and_data_write(mb_address_type address,short* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool code_and_data_write(mb_address_type address,int* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool code_and_data_write(mb_address_type address,sc_dt::int64* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  }  

  bool code_and_data_read(mb_address_type address,unsigned char& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool code_and_data_read(mb_address_type address,unsigned short& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool code_and_data_read(mb_address_type address,unsigned int& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool code_and_data_read(mb_address_type address,sc_dt::uint64& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool code_and_data_read(mb_address_type address,char& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool code_and_data_read(mb_address_type address,short& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool code_and_data_read(mb_address_type address,int& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool code_and_data_read(mb_address_type address,sc_dt::int64& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }  
  
  bool code_and_data_write(mb_address_type address,unsigned char data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool code_and_data_write(mb_address_type address,unsigned short data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool code_and_data_write(mb_address_type address,unsigned int data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool code_and_data_write(mb_address_type address,sc_dt::uint64 data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool code_and_data_write(mb_address_type address,char data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool code_and_data_write(mb_address_type address,short data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool code_and_data_write(mb_address_type address,int data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool code_and_data_write(mb_address_type address,sc_dt::int64 data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  } 

  ////////////////////////////////////////
  // functions for initiator port: console
  ////////////////////////////////////////
  virtual bool console_enable() {
    return console_set_enable(true);
  }
  virtual bool console_disable() {
    return console_set_enable(false);
  }
  virtual bool console_set_enable(bool enable) {
    string port_path = mb::tlm20::remove_pv(sc_core::sc_object::name()) + + ".console";
    esl::sc_sim::pvt_port_connect* pvt_port = dynamic_cast<esl::sc_sim::pvt_port_connect*>(sc_find_object(port_path.c_str()));
    if(!pvt_port) {
      return false;
    }
    (dynamic_cast<mb::utl::ExternalAccess*>(pvt_port))->external_enable(enable);
    return true;
  }
  virtual void console_b_transport(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t) {
    trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    console->b_transport(trans, t);
  }

  virtual unsigned int console_transport_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    return console->transport_dbg(trans);
  }
  bool console_transport(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    sc_core::sc_time t;
    trans.set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);
    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    console->b_transport(trans, t);
    return trans.get_response_status() == tlm::TLM_OK_RESPONSE;
  }

   
  bool console_read(mb_address_type address, unsigned char* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool console_read(mb_address_type address, unsigned short* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool console_read(mb_address_type address, unsigned int* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool console_read(mb_address_type address, sc_dt::uint64* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool console_read(mb_address_type address, char* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool console_read(mb_address_type address, short* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool console_read(mb_address_type address, int* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  bool console_read(mb_address_type address, sc_dt::int64* data, unsigned _size, 
                        unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  }   
  
  bool console_write(mb_address_type address,unsigned char* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool console_write(mb_address_type address,unsigned short* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool console_write(mb_address_type address,unsigned int* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool console_write(mb_address_type address,sc_dt::uint64* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool console_write(mb_address_type address,char* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool console_write(mb_address_type address,short* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool console_write(mb_address_type address,int* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  } 
  
  bool console_write(mb_address_type address,sc_dt::int64* data, unsigned _size,
                         unsigned streaming_width = 0) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(streaming_width);

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;

  }  

  bool console_read(mb_address_type address,unsigned char& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool console_read(mb_address_type address,unsigned short& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool console_read(mb_address_type address,unsigned int& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool console_read(mb_address_type address,sc_dt::uint64& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool console_read(mb_address_type address,char& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool console_read(mb_address_type address,short& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool console_read(mb_address_type address,int& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }

  bool console_read(mb_address_type address,sc_dt::int64& data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_READ_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }  
  
  bool console_write(mb_address_type address,unsigned char data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool console_write(mb_address_type address,unsigned short data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool console_write(mb_address_type address,unsigned int data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool console_write(mb_address_type address,sc_dt::uint64 data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool console_write(mb_address_type address,char data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool console_write(mb_address_type address,short data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool console_write(mb_address_type address,int data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  }
  
  bool console_write(mb_address_type address,sc_dt::int64 data) {

    mb_address_type local_address = address;
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    trans->set_streaming_width(sizeof(data));

    mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*trans);
    if (extension && !extension->getToken()) {
      esl::sc_sim::mb_scene* scene = esl::sc_sim::pvt_connect::getPVTBaseModel()->getCurrentScene();
      if (scene)
        extension->setToken(scene->getToken());
    }
    
    bool retv = mb::tlm20::do_b_transport(*console[0], *trans, tlm::TLM_WRITE_COMMAND, local_address,
                                          (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;

  } 



  ///////////////////////////////////////
  // dbg functions for port: dma_slave
  /////////////////////////////////////// 
  
  
  unsigned dma_slave_read_dbg(mb_address_type address, unsigned char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned dma_slave_read_dbg(mb_address_type address, unsigned short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned dma_slave_read_dbg(mb_address_type address, unsigned int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned dma_slave_read_dbg(mb_address_type address, sc_dt::uint64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned dma_slave_read_dbg(mb_address_type address, char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned dma_slave_read_dbg(mb_address_type address, short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned dma_slave_read_dbg(mb_address_type address, int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned dma_slave_read_dbg(mb_address_type address, sc_dt::int64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, unsigned char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, unsigned short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, unsigned int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, sc_dt::uint64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, sc_dt::int64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  
  unsigned dma_slave_read_dbg(mb_address_type address, unsigned char& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned dma_slave_read_dbg(mb_address_type address, unsigned short& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned dma_slave_read_dbg(mb_address_type address, unsigned int& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned dma_slave_read_dbg(mb_address_type address, sc_dt::uint64& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned dma_slave_read_dbg(mb_address_type address, char& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned dma_slave_read_dbg(mb_address_type address, short& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned dma_slave_read_dbg(mb_address_type address, int& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned dma_slave_read_dbg(mb_address_type address, sc_dt::int64& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, unsigned char data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, unsigned short data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, unsigned int data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, sc_dt::uint64 data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, char data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, short data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, int data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned dma_slave_write_dbg(mb_address_type address, sc_dt::int64 data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*dma_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  } 

  ///////////////////////////////////////
  // dbg functions for port: mem_slave
  /////////////////////////////////////// 
  
  
  unsigned mem_slave_read_dbg(mb_address_type address, unsigned char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned mem_slave_read_dbg(mb_address_type address, unsigned short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned mem_slave_read_dbg(mb_address_type address, unsigned int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned mem_slave_read_dbg(mb_address_type address, sc_dt::uint64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned mem_slave_read_dbg(mb_address_type address, char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned mem_slave_read_dbg(mb_address_type address, short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned mem_slave_read_dbg(mb_address_type address, int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned mem_slave_read_dbg(mb_address_type address, sc_dt::int64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, unsigned char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, unsigned short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, unsigned int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, sc_dt::uint64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, sc_dt::int64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  
  unsigned mem_slave_read_dbg(mb_address_type address, unsigned char& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned mem_slave_read_dbg(mb_address_type address, unsigned short& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned mem_slave_read_dbg(mb_address_type address, unsigned int& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned mem_slave_read_dbg(mb_address_type address, sc_dt::uint64& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned mem_slave_read_dbg(mb_address_type address, char& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned mem_slave_read_dbg(mb_address_type address, short& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned mem_slave_read_dbg(mb_address_type address, int& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned mem_slave_read_dbg(mb_address_type address, sc_dt::int64& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, unsigned char data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, unsigned short data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, unsigned int data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, sc_dt::uint64 data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, char data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, short data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, int data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned mem_slave_write_dbg(mb_address_type address, sc_dt::int64 data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*mem_slave[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  } 

  ///////////////////////////////////////
  // dbg functions for port: code_and_data
  /////////////////////////////////////// 
  
  
  unsigned code_and_data_read_dbg(mb_address_type address, unsigned char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned code_and_data_read_dbg(mb_address_type address, unsigned short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned code_and_data_read_dbg(mb_address_type address, unsigned int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned code_and_data_read_dbg(mb_address_type address, sc_dt::uint64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned code_and_data_read_dbg(mb_address_type address, char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned code_and_data_read_dbg(mb_address_type address, short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned code_and_data_read_dbg(mb_address_type address, int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned code_and_data_read_dbg(mb_address_type address, sc_dt::int64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, unsigned char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, unsigned short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, unsigned int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, sc_dt::uint64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, sc_dt::int64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  
  unsigned code_and_data_read_dbg(mb_address_type address, unsigned char& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned code_and_data_read_dbg(mb_address_type address, unsigned short& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned code_and_data_read_dbg(mb_address_type address, unsigned int& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned code_and_data_read_dbg(mb_address_type address, sc_dt::uint64& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned code_and_data_read_dbg(mb_address_type address, char& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned code_and_data_read_dbg(mb_address_type address, short& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned code_and_data_read_dbg(mb_address_type address, int& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned code_and_data_read_dbg(mb_address_type address, sc_dt::int64& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, unsigned char data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, unsigned short data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, unsigned int data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, sc_dt::uint64 data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, char data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, short data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, int data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned code_and_data_write_dbg(mb_address_type address, sc_dt::int64 data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*code_and_data[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  } 

  ///////////////////////////////////////
  // dbg functions for port: console
  /////////////////////////////////////// 
  
  
  unsigned console_read_dbg(mb_address_type address, unsigned char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned console_read_dbg(mb_address_type address, unsigned short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned console_read_dbg(mb_address_type address, unsigned int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned console_read_dbg(mb_address_type address, sc_dt::uint64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned console_read_dbg(mb_address_type address, char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned console_read_dbg(mb_address_type address, short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned console_read_dbg(mb_address_type address, int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  unsigned console_read_dbg(mb_address_type address, sc_dt::int64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, unsigned char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, unsigned short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, unsigned int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, sc_dt::uint64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, char* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, short* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, int* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, sc_dt::int64* data, unsigned _size) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)data, _size * sizeof(*data));

    trans->release();
    return retv;
  }
  
  unsigned console_read_dbg(mb_address_type address, unsigned char& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned console_read_dbg(mb_address_type address, unsigned short& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned console_read_dbg(mb_address_type address, unsigned int& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned console_read_dbg(mb_address_type address, sc_dt::uint64& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned console_read_dbg(mb_address_type address, char& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned console_read_dbg(mb_address_type address, short& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned console_read_dbg(mb_address_type address, int& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }
  
  unsigned console_read_dbg(mb_address_type address, sc_dt::int64& data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_READ_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, unsigned char data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, unsigned short data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, unsigned int data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, sc_dt::uint64 data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, char data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, short data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, int data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  }

  unsigned console_write_dbg(mb_address_type address, sc_dt::int64 data) {
    tlm::tlm_generic_payload* trans = mb::tlm20::get_object_pull().new_payload();
    
    unsigned retv = mb::tlm20::do_transport_dbg(*console[0], *trans, tlm::TLM_WRITE_COMMAND,
                                                address, (unsigned char*)&data, sizeof(data));

    trans->release();
    return retv;
  } 


  tlm::tlm_generic_payload* payload_on_stack;
  tlm::tlm_generic_payload* payload_for_token;

  ////////////////////////////////////////
  // request DMI for port: dma_slave
  ////////////////////////////////////////
  virtual bool dma_slave_get_direct_memory_ptr(tlm::tlm_generic_payload& trans, tlm::tlm_dmi& dmi_data) {
    return dma_slave->get_direct_mem_ptr(trans, dmi_data);
  }

  bool dma_slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmi_data) {
    tlm::tlm_generic_payload* trans = payload_on_stack;
    if (!payload_on_stack)
      trans = mb::tlm20::get_object_pull().new_payload();

    bool retv = false;

    {
      mb::tlm20::save_payload<tlm::tlm_generic_payload> save(*trans);
      trans->set_command(tlm::TLM_READ_COMMAND);
      trans->set_address(address);
      retv = dma_slave->get_direct_mem_ptr(*trans, dmi_data);
    }
    if (!payload_on_stack)
      trans->release();
    return retv;
  }

  bool dma_slave_get_direct_memory_ptr(tlm::tlm_command command, mb_address_type address, tlm::tlm_dmi& dmi_data) {
    tlm::tlm_generic_payload* trans = payload_on_stack;
    if (!payload_on_stack)
      trans = mb::tlm20::get_object_pull().new_payload();

    trans->set_command(command);
    trans->set_address(address);
    
    bool retv = dma_slave->get_direct_mem_ptr(*trans, dmi_data);
    if (!payload_on_stack)
      trans->release();
    return retv;
  }
  ////////////////////////////////////////
  // request DMI for port: mem_slave
  ////////////////////////////////////////
  virtual bool mem_slave_get_direct_memory_ptr(tlm::tlm_generic_payload& trans, tlm::tlm_dmi& dmi_data) {
    return mem_slave->get_direct_mem_ptr(trans, dmi_data);
  }

  bool mem_slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmi_data) {
    tlm::tlm_generic_payload* trans = payload_on_stack;
    if (!payload_on_stack)
      trans = mb::tlm20::get_object_pull().new_payload();

    bool retv = false;

    {
      mb::tlm20::save_payload<tlm::tlm_generic_payload> save(*trans);
      trans->set_command(tlm::TLM_READ_COMMAND);
      trans->set_address(address);
      retv = mem_slave->get_direct_mem_ptr(*trans, dmi_data);
    }
    if (!payload_on_stack)
      trans->release();
    return retv;
  }

  bool mem_slave_get_direct_memory_ptr(tlm::tlm_command command, mb_address_type address, tlm::tlm_dmi& dmi_data) {
    tlm::tlm_generic_payload* trans = payload_on_stack;
    if (!payload_on_stack)
      trans = mb::tlm20::get_object_pull().new_payload();

    trans->set_command(command);
    trans->set_address(address);
    
    bool retv = mem_slave->get_direct_mem_ptr(*trans, dmi_data);
    if (!payload_on_stack)
      trans->release();
    return retv;
  }
  ////////////////////////////////////////
  // request DMI for port: code_and_data
  ////////////////////////////////////////
  virtual bool code_and_data_get_direct_memory_ptr(tlm::tlm_generic_payload& trans, tlm::tlm_dmi& dmi_data) {
    return code_and_data->get_direct_mem_ptr(trans, dmi_data);
  }

  bool code_and_data_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmi_data) {
    tlm::tlm_generic_payload* trans = payload_on_stack;
    if (!payload_on_stack)
      trans = mb::tlm20::get_object_pull().new_payload();

    bool retv = false;

    {
      mb::tlm20::save_payload<tlm::tlm_generic_payload> save(*trans);
      trans->set_command(tlm::TLM_READ_COMMAND);
      trans->set_address(address);
      retv = code_and_data->get_direct_mem_ptr(*trans, dmi_data);
    }
    if (!payload_on_stack)
      trans->release();
    return retv;
  }

  bool code_and_data_get_direct_memory_ptr(tlm::tlm_command command, mb_address_type address, tlm::tlm_dmi& dmi_data) {
    tlm::tlm_generic_payload* trans = payload_on_stack;
    if (!payload_on_stack)
      trans = mb::tlm20::get_object_pull().new_payload();

    trans->set_command(command);
    trans->set_address(address);
    
    bool retv = code_and_data->get_direct_mem_ptr(*trans, dmi_data);
    if (!payload_on_stack)
      trans->release();
    return retv;
  }
  ////////////////////////////////////////
  // request DMI for port: console
  ////////////////////////////////////////
  virtual bool console_get_direct_memory_ptr(tlm::tlm_generic_payload& trans, tlm::tlm_dmi& dmi_data) {
    return console->get_direct_mem_ptr(trans, dmi_data);
  }

  bool console_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmi_data) {
    tlm::tlm_generic_payload* trans = payload_on_stack;
    if (!payload_on_stack)
      trans = mb::tlm20::get_object_pull().new_payload();

    bool retv = false;

    {
      mb::tlm20::save_payload<tlm::tlm_generic_payload> save(*trans);
      trans->set_command(tlm::TLM_READ_COMMAND);
      trans->set_address(address);
      retv = console->get_direct_mem_ptr(*trans, dmi_data);
    }
    if (!payload_on_stack)
      trans->release();
    return retv;
  }

  bool console_get_direct_memory_ptr(tlm::tlm_command command, mb_address_type address, tlm::tlm_dmi& dmi_data) {
    tlm::tlm_generic_payload* trans = payload_on_stack;
    if (!payload_on_stack)
      trans = mb::tlm20::get_object_pull().new_payload();

    trans->set_command(command);
    trans->set_address(address);
    
    bool retv = console->get_direct_mem_ptr(*trans, dmi_data);
    if (!payload_on_stack)
      trans->release();
    return retv;
  }


  ////////////////////////////////////////
  // functions for target port: cpu_master
  ////////////////////////////////////////
  protected:
  virtual bool cpu_master_callback_read(mb_address_type address,
                                                      unsigned char* data,
                                                      unsigned size) {
    mb_address_type local_address = address;
     mb_compatibility_class *This = this;
     return This->cpu_master_callback_read(mb_compatibility_class::mb_address_type(local_address),
                                                        data,
                                                        size);
   }
   virtual bool cpu_master_callback_write(mb_address_type address,
                                                       unsigned char* data,
                                                       unsigned size) {
     mb_address_type local_address = address;
     mb_compatibility_class *This = this;
     return This->cpu_master_callback_write(mb_compatibility_class::mb_address_type(local_address),
                                                         data,
                                                         size);
   }

   virtual unsigned cpu_master_callback_read_dbg(mb_address_type address,
                                                              unsigned char* data,
                                                              unsigned size) {
     mb_compatibility_class *This = this;
     return This->cpu_master_callback_read_dbg(mb_compatibility_class::mb_address_type(address),
                                                            data,
                                                            size);
   }
   virtual unsigned cpu_master_callback_write_dbg(mb_address_type address,
                                                               unsigned char* data,
                                                               unsigned size) {
     mb_compatibility_class *This = this;
     return This->cpu_master_callback_write_dbg(mb_compatibility_class::mb_address_type(address),
                                                             data,
                                                             size);
   }
   virtual bool cpu_master_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
     mb_compatibility_class *This = this;
     return This->cpu_master_get_direct_memory_ptr(mb_compatibility_class::mb_address_type(address), dmiData);
   }
   virtual void cpu_master_invalidate_direct_memory_ptr(sc_dt::uint64 start_range, sc_dt::uint64 end_range) {
     return cpu_master->invalidate_direct_mem_ptr(start_range, end_range);
   }
  ////////////////////////////////////////
  // functions for target port: dma_master
  ////////////////////////////////////////
  protected:
  virtual bool dma_master_callback_read(mb_address_type address,
                                                      unsigned char* data,
                                                      unsigned size) {
    mb_address_type local_address = address;
     mb_compatibility_class *This = this;
     return This->dma_master_callback_read(mb_compatibility_class::mb_address_type(local_address),
                                                        data,
                                                        size);
   }
   virtual bool dma_master_callback_write(mb_address_type address,
                                                       unsigned char* data,
                                                       unsigned size) {
     mb_address_type local_address = address;
     mb_compatibility_class *This = this;
     return This->dma_master_callback_write(mb_compatibility_class::mb_address_type(local_address),
                                                         data,
                                                         size);
   }

   virtual unsigned dma_master_callback_read_dbg(mb_address_type address,
                                                              unsigned char* data,
                                                              unsigned size) {
     mb_compatibility_class *This = this;
     return This->dma_master_callback_read_dbg(mb_compatibility_class::mb_address_type(address),
                                                            data,
                                                            size);
   }
   virtual unsigned dma_master_callback_write_dbg(mb_address_type address,
                                                               unsigned char* data,
                                                               unsigned size) {
     mb_compatibility_class *This = this;
     return This->dma_master_callback_write_dbg(mb_compatibility_class::mb_address_type(address),
                                                             data,
                                                             size);
   }
   virtual bool dma_master_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
     mb_compatibility_class *This = this;
     return This->dma_master_get_direct_memory_ptr(mb_compatibility_class::mb_address_type(address), dmiData);
   }
   virtual void dma_master_invalidate_direct_memory_ptr(sc_dt::uint64 start_range, sc_dt::uint64 end_range) {
     return dma_master->invalidate_direct_mem_ptr(start_range, end_range);
   } 


   
  
  
 

 public:
  typedef tlm::tlm_base_protocol_types dma_slave_protocol_types;
  typedef tlm::tlm_base_protocol_types mem_slave_protocol_types;
  typedef tlm::tlm_base_protocol_types code_and_data_protocol_types;
  typedef tlm::tlm_base_protocol_types console_protocol_types;
  typedef tlm::tlm_base_protocol_types cpu_master_protocol_types;
  typedef tlm::tlm_base_protocol_types dma_master_protocol_types;
  typedef tlm::tlm_base_protocol_types::tlm_payload_type dma_slave_payload_type;
  typedef tlm::tlm_base_protocol_types::tlm_payload_type mem_slave_payload_type;
  typedef tlm::tlm_base_protocol_types::tlm_payload_type code_and_data_payload_type;
  typedef tlm::tlm_base_protocol_types::tlm_payload_type console_payload_type;
  typedef tlm::tlm_base_protocol_types::tlm_payload_type cpu_master_payload_type;
  typedef tlm::tlm_base_protocol_types::tlm_payload_type dma_master_payload_type;

 public:
  // port declarations 

  tlm::tlm_initiator_socket <32, tlm::tlm_base_protocol_types> dma_slave;
  tlm::tlm_initiator_socket <32, tlm::tlm_base_protocol_types> mem_slave;
  tlm::tlm_initiator_socket <32, tlm::tlm_base_protocol_types> code_and_data;
  tlm::tlm_initiator_socket <32, tlm::tlm_base_protocol_types> console;
  tlm::tlm_target_socket <32, tlm::tlm_base_protocol_types>  cpu_master;
  tlm::tlm_target_socket <32, tlm::tlm_base_protocol_types>  dma_master;  

    
 public:
  void send_b_transport(unsigned port_index, tlm::tlm_generic_payload& trans, sc_core::sc_time& t) {
    if (port_index > mb::mb_module::get_port_count() || !mb::mb_module::is_master(port_index))
      return;

    if (port_index >= dma_slave_idx && port_index <= dma_slave_idx)
      return dma_slave->b_transport(trans, t);
    if (port_index >= mem_slave_idx && port_index <= mem_slave_idx)
      return mem_slave->b_transport(trans, t);
    if (port_index >= code_and_data_idx && port_index <= code_and_data_idx)
      return code_and_data->b_transport(trans, t);
    if (port_index >= console_idx && port_index <= console_idx)
      return console->b_transport(trans, t);
    return;
    
  }

  unsigned send_transport_dbg(unsigned port_index, tlm::tlm_generic_payload& trans) {
    if (port_index > mb::mb_module::get_port_count() || !mb::mb_module::is_master(port_index))
      return 0;

    if (port_index >= dma_slave_idx && port_index <= dma_slave_idx)
      return dma_slave->transport_dbg(trans);
    if (port_index >= mem_slave_idx && port_index <= mem_slave_idx)
      return mem_slave->transport_dbg(trans);
    if (port_index >= code_and_data_idx && port_index <= code_and_data_idx)
      return code_and_data->transport_dbg(trans);
    if (port_index >= console_idx && port_index <= console_idx)
      return console->transport_dbg(trans);
    
    return 0;
  }
  
  

 public:
  mb::mb_token_ptr get_current_token() {
    mb::mb_token_ptr token_ptr = mb::mb_module::get_current_token();
    if (token_ptr)
      return token_ptr;
    if (payload_for_token) {
      mb::tlm20::pvt_ext* extension = mb::tlm20::setup_pvt_ext(*payload_for_token);
      if (extension) {
        mb::mb_module::set_current_token(extension->getToken());
        return extension->getToken();
      }
    }
    return 0;
  }
  

 protected:
};



/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/


#pragma once

#include "axi_bus_model.h"
#include "model_builder.h"
#include <queue>


class axi_bus_base1_pv : public axi_bus_pv_base,
         public mb::sysc::ParameterListener {
public:
  SC_HAS_PROCESS(axi_bus_base1_pv);
  
  axi_bus_base1_pv(sc_module_name module_name); 

  virtual ~axi_bus_base1_pv();

 public:
  tlm::tlm_target_socket<32, tlm::tlm_base_protocol_types,
    1,
    sc_core::SC_ZERO_OR_MORE_BOUND> dbg_port;
  tlm::tlm_target_socket<32, tlm::tlm_base_protocol_types,
    1,
                         sc_core::SC_ZERO_OR_MORE_BOUND>& get_dbg_port() {
    return dbg_port;
  }
private:
  PapoulisBusBaseModel *m_model;
  mb::tlm20::fw_process<tlm::tlm_base_protocol_types> m_dbg_port_fw_process;
public:
  virtual void cpu_master_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t);
  virtual unsigned cpu_master_callback_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans);
  virtual bool cpu_master_get_direct_memory_ptr_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, tlm::tlm_dmi& dmiData);
  virtual void dma_master_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t);
  virtual unsigned dma_master_callback_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans);
  virtual bool dma_master_get_direct_memory_ptr_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, tlm::tlm_dmi& dmiData);
  void dbg_port_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t);
  unsigned dbg_port_callback_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans); 
  bool dbg_port_get_direct_memory_ptr_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, tlm::tlm_dmi& dmiData);

 public: 
  virtual void parameter_changed(const std::string& parameter,
                                 const std::string& old_value,
                                 const std::string& new_value);
  virtual void invalidate_direct_mem_ptr_callback(unsigned master_index, sc_dt::uint64 start_range, sc_dt::uint64 end_range);
  virtual void dma_slave_invalidate_direct_mem_ptr_callback(sc_dt::uint64 start_range, sc_dt::uint64 end_range);
  virtual void mem_slave_invalidate_direct_mem_ptr_callback(sc_dt::uint64 start_range, sc_dt::uint64 end_range);
  virtual void code_and_data_invalidate_direct_mem_ptr_callback(sc_dt::uint64 start_range, sc_dt::uint64 end_range);
  virtual void console_invalidate_direct_mem_ptr_callback(sc_dt::uint64 start_range, sc_dt::uint64 end_range);

  void invalidate_direct_mem_ptr(unsigned target_index, sc_dt::uint64 start_range, sc_dt::uint64 end_range);

  void set_secure_payload(esl::sc_sim::secure_payload* inst) {
    decoder->setSecurePayload(inst);
  }
protected:
  unsigned m_port_count;
  unsigned m_layers_count;
  bool     m_is_multi_channel;
  esl::sc_sim::BusScheduler *m_bus_scheduler;
  bool m_apply_policies;
  bool m_in_loop;

  tlm::tlm_fw_transport_if<tlm::tlm_base_protocol_types>* get_fw_transport_if(unsigned port_index) {
    switch (port_index) {
    case (0):
      return dma_slave[0];
    case (1):
      return mem_slave[0];
    case (4):
      return code_and_data[0];
    case (5):
      return console[0];
    default:
      std::cerr << "Bad port index requested in get_fw_transport_if: " << port_index << std::endl;
      return 0;
    }
  }

  const char* get_fw_transport_if_name(unsigned port_index) {
    switch (port_index) {
    case (0):
      return "dma_slave";
    case (1):
      return "mem_slave";
    case (4):
      return "code_and_data";
    case (5):
      return "console";
    default:
      return  " ";
    }
  }

  tlm::tlm_bw_transport_if<tlm::tlm_base_protocol_types>* get_bw_transport_if(unsigned port_index) {
    switch (port_index) {
    case (2):
      return cpu_master[0];
    case (3):
      return dma_master[0];
    default:
      std::cerr << "Bad port index requested in get_bw_transport_if: " << port_index << std::endl;
      return 0;
    }
  }

private:
  template <class Payload>
  void handle_port_dci(esl::sc_sim::user_model::SlaveRange* slaveRange, Payload& trans) {
    long long address = trans.get_address();
    config::uint64 startAddress = slaveRange->getSlaveStartAddress();
    bool isDefaultServer = slaveRange->isDefaultServer();
    trans.get_extension(p_port_dci_ext);
    if(p_port_dci_ext != NULL) {
    /*
      if(isDefaultServer)
        p_port_dci_ext->set_current_range(address, (address+trans.get_data_length()-1), 0);
      else
        p_port_dci_ext->set_current_range(startAddress, slaveRange->getSlaveEndAddress(), slaveRange->getSubtractBaseAddress() ? startAddress : 0);
    */
      //must be in this order: 1. start address 2. end address 3. subtract address
      p_port_dci_ext->set_start_address(isDefaultServer ? address : startAddress);
      p_port_dci_ext->set_end_address(isDefaultServer ? (address+trans.get_data_length()-1) : slaveRange->getSlaveEndAddress());
      p_port_dci_ext->set_subtract_address((isDefaultServer|| !slaveRange->getSubtractBaseAddress()) ? 0 : startAddress);
      p_port_dci_ext->clear_first_bus();
      
    }
    

  }

  template <class Payload>
    bool routePayload(Payload& trans, tlm::tlm_dmi& dmiData, const int index) {

    long long virtualAddress  = (long long)(decoder->getVirtualAddress(index, trans.get_address()));
    esl::sc_sim::user_model::SlaveRange* slaveRange = decoder->getSlavePortRange(virtualAddress, startIdxArray[index]);
    sc_dt::uint64 address     = trans.get_address();

    if(slaveRange == NULL) {
      dmiData.set_start_address(address);
      dmiData.set_end_address(address);
      return false;
    }

    sc_dt::uint64 baseAddress = slaveRange->getBaseAddress(virtualAddress); 
    long long slavePortIndex = (long long)slaveRange->getSlavePortIndex();

    trans.set_address(baseAddress);
    bool status = get_fw_transport_if(slavePortIndex)->get_direct_mem_ptr(trans, dmiData);
    trans.set_address(address);

    // clip the range
    sc_dt::uint64 dmiStartAddress = dmiData.get_start_address();
    sc_dt::uint64 dmiEndAddress = dmiData.get_end_address();
    unsigned char* dmiPtr = dmiData.get_dmi_ptr();
    signed long long offset = address - virtualAddress;
    mb::tlm20::iss_core_ext *ext = 0;
    trans.get_extension(ext);
    clip_the_range(dmiStartAddress, dmiEndAddress, dmiPtr, slaveRange, offset, ext);

    dmiData.set_start_address(dmiStartAddress);
    dmiData.set_end_address(dmiEndAddress);
    dmiData.set_dmi_ptr(dmiPtr);

    return status;
  }

  template <class Payload>
    unsigned routePayload(Payload& trans, unsigned targetPortIndex, bool isDebug, sc_core::sc_time& t) {    

    if(m_fast_mode) {
      unsigned status = 1;

      long long address = trans.get_address();
      esl::sc_sim::user_model::SlaveRange* slaveRange = decoder->getSlavePortRange(address, startIdxArray[targetPortIndex]);
      if(slaveRange == NULL) {
        trans.set_response_status(tlm::TLM_ADDRESS_ERROR_RESPONSE);
        return 0;
      }    

      handle_port_dci(slaveRange, trans);

      long long slavePortIndex = (long long)slaveRange->getSlavePortIndex();
#ifdef DEBUG_DCI
      std::cout << "BUS: " << this->name() << "  in address=" << std::hex << std::showbase << address <<  "  ";
#endif
      address = slaveRange->getBaseAddress(address); 
#ifdef DEBUG_DCI
		std::cout << "out address=" << std::hex << std::showbase << address << " to port " << get_fw_transport_if_name(slavePortIndex) << std::endl;
#endif
      trans.set_response_status(TLM_OK_RESPONSE);
      trans.set_address(address);

      if(isDebug)
        return get_fw_transport_if(slavePortIndex)->transport_dbg(trans);  
      else
        get_fw_transport_if(slavePortIndex)->b_transport(trans, t);

      if(trans.is_response_ok())
        status = 0;
    
      return status;
    } else {

      bool isNotDebugPort = (targetPortIndex != (unsigned) (-1));
      tlm::tlm_command command = trans.get_command();
      bool read_or_write_command = (command == tlm::TLM_READ_COMMAND)||(command == tlm::TLM_WRITE_COMMAND);
      
      sc_core::sc_time waiting_time(0, SC_MS) ;
      sc_core::sc_time returned_time(0, SC_PS);
      sc_dt::uint64 virtualAddress = trans.get_address();
      
      esl::sc_sim::PVTBaseModel* owner = getPVTBaseModel();

       bool isSchedulerOp = ((m_apply_policies)&&(!isDebug)&&(read_or_write_command)&&(mb::tlm20::is_LT_mode()));
       int layer = m_model ? m_model->get_arbiter()->get_slave_layer(targetPortIndex) : 0;
       layer = (layer>0)?layer:0;
       if (isSchedulerOp){
         if (t > sc_core::SC_ZERO_TIME)
           {
             sc_core::wait(t);
             t = sc_core::SC_ZERO_TIME;
           }
       }
      sc_core::sc_time initial_time = t;
      if (isNotDebugPort)
        virtualAddress = decoder->getVirtualAddress(targetPortIndex, trans.get_address());
      unsigned portSize = 32;
      if (isNotDebugPort)
        portSize = getPortSize(targetPortIndex);
      const char* portName = isNotDebugPort ? get_port_name(targetPortIndex) : "dbg_port";
      std::vector<long> slavePortIndexArray;
      bool saved_isDebug = isDebug;
      if (trans.get_command() == tlm::TLM_IGNORE_COMMAND) {
        isDebug = true;
      }
      esl::sc_sim::secure_payload* secure_inst = decoder->getSecurePayload();
      if (secure_inst) {
        if (secure_inst->get_security_value(trans) ==
            esl::sc_sim::secure_payload::NON_SECURE)
          decoder->getNonSecuredSlavePortIndexArray(slavePortIndexArray, virtualAddress, portSize, name(), portName, targetPortIndex, isDebug);
        else
          decoder->getSecuredSlavePortIndexArray(slavePortIndexArray, virtualAddress, portSize, name(), portName, targetPortIndex, isDebug);
      } else
        decoder->getSlavePortIndexArray(slavePortIndexArray, virtualAddress, portSize, name(), portName, isDebug);
      if (slavePortIndexArray.size() == 0) {
        trans.set_response_status(tlm::TLM_ADDRESS_ERROR_RESPONSE);
        return 0;
      }

      unsigned status = 1;
      unsigned slavePortsSize = slavePortIndexArray.size();
      bool broadcasting = false;
      if (slavePortsSize > 1 && write_broadcast)
        broadcasting = true;
      returned_time = t;
      
      for (unsigned u = 0; u < slavePortsSize; u++) {
        if (broadcasting) {
          t = initial_time;
        }
        long slavePortIndex = slavePortIndexArray[u];
        // check secure
        if (secure_inst) {
          if (secure_inst->get_security_value(trans) ==
              esl::sc_sim::secure_payload::NON_SECURE &&
              decoder->getSecure(slavePortIndex, targetPortIndex)) {
            trans.set_response_status(tlm::TLM_ADDRESS_ERROR_RESPONSE);
            std::stringstream str;
            str << "attempt to reach a secured device from an unsecured transaction "
                << ": address " << std::dec << trans.get_address()
                << "(0x" << std::hex << trans.get_address() << ")";
            mb::sysc::issue_warning(str.str().c_str(), this->name());
            return 0;
          }
        }
        trans.set_response_status(TLM_OK_RESPONSE);
        
        sc_dt::uint64 baseAddress = decoder->getBaseAddress(slavePortIndex, virtualAddress);
        trans.set_address(baseAddress);
        isDebug = saved_isDebug;
        if (isDebug) {
          unsigned size = get_fw_transport_if(slavePortIndex)->transport_dbg(trans);
          return size;
        } else {
          
          ::papoulis::BusMonitor* busMonitor = 0;
          if (getSystemCBaseModel())
            busMonitor = getSystemCBaseModel()->getBusMonitor();
          if (busMonitor)
            busMonitor->b_transport_tracer_prehook(papoulis::BusMonitor::SlaveSide, targetPortIndex, slavePortIndex, trans, t);                          
          if (!isNotDebugPort)
            disable_T();
          if (busMonitor)
            busMonitor->b_transport_tracer_prehook(papoulis::BusMonitor::MasterSide, targetPortIndex, slavePortIndex, trans, t); 

          if (isSchedulerOp) {
            m_bus_scheduler->update_layer(layer, slavePortIndex, command);
            m_bus_scheduler->register_request(targetPortIndex, layer, command);
            m_bus_scheduler->wait_for_event(targetPortIndex, layer, command, waiting_time);
            if (waiting_time > sc_core::SC_ZERO_TIME)
              sc_core::wait(waiting_time);
            unsigned latency = (owner == 0) ? 0 : Papoulis_UserRunningModel_GetBusLatency(owner->getSystemCBaseModel()->getUserRunningModel(),
                                                                       papoulis::getSimulationTime(),
                                                                       targetPortIndex,
                                                                       slavePortIndex,
                                                                       trans.get_data_length(),
                                                                       trans.get_address(),
                                                                       0,
                                                                       0,
                                                                       trans.is_write());
            if (latency > 0)
              wait(latency * clock);
          }
          
          get_fw_transport_if(slavePortIndex)->b_transport(trans, t);

          if (busMonitor)
            busMonitor->b_transport_tracer_posthook(papoulis::BusMonitor::MasterSide, targetPortIndex, slavePortIndex, trans, t); 
          if (!isNotDebugPort)
            enable_T();
          if (busMonitor)
            busMonitor->b_transport_tracer_posthook(papoulis::BusMonitor::SlaveSide, targetPortIndex, slavePortIndex, trans, t);
          if (!trans.is_response_ok())
            status = 0;
        }

        if (t > returned_time)
          returned_time = t;
        if (isSchedulerOp) {
          if (broadcasting)
            m_bus_scheduler->notify_next_queue_task(layer, command, initial_time, slavePortIndex);
          else
            m_bus_scheduler->notify_next_queue_task(layer, command, t, slavePortIndex);
        }
        
        // dont broadcast for read
        if (trans.get_command() == tlm::TLM_READ_COMMAND)
          break;
      }
      t = returned_time;
      return status;
    }
    return 1;
  }

  protected:
   unsigned getPortSize(unsigned portIndex) {
     switch(portIndex) {
     case 0 : {
       return 32 >> 3;
     }
     case 1 : {
       return 32 >> 3;
     }
     case 4 : {
       return 32 >> 3;
     }
     case 5 : {
       return 32 >> 3;
     }
     case 2 : {
       return 32 >> 3;
     }
     case 3 : {
       return 32 >> 3;
     }
     default:
       assert(0);
     }
     return sizeof(unsigned int);
   }

 protected:
  esl::sc_sim::user_model::Decoder* decoder;
  
  struct TargetPlusOffset {
    TargetPlusOffset(sc_dt::uint64 address, unsigned target_index, signed long long offset) :
      m_address(address), m_target_index(target_index), m_offset(offset) {}
    sc_dt::uint64 m_address;
    unsigned m_target_index;
    signed long long m_offset;
  };
  std::vector<std::deque<TargetPlusOffset> >  m_dmi_request_array;

  void clip_the_range(sc_dt::uint64 address,
                      sc_dt::uint64 &dmiStartAddress,
                      sc_dt::uint64 &dmiEndAddress,
                      unsigned char* &dmiPtr,
                      long slavePortIndex,
                      signed long long offset,
                      mb::tlm20::iss_core_ext *ext);
  void clip_the_range(sc_dt::uint64 &dmiStartAddress,
                      sc_dt::uint64 &dmiEndAddress,
                      unsigned char* &dmiPtr,
                      esl::sc_sim::user_model::SlaveRange* slaveRange,
                      signed long long offset,
                      mb::tlm20::iss_core_ext *ext);

 private:
  unsigned long long startIdxArray[2];
  bool m_fast_mode;
  mb::tlm20::port_dci_ext *p_port_dci_ext;
};




/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* 
//* Any change in parameters, policies, ports, protocols, etc. will change this file
//* upon generation of the timing model (using generate_timing_model command).
//* The axi_bus_t will be derived from this class.
//*
//* Model Builder version: 5.1.0
//* Generated on: Mar. 09, 2022 11:24:25 AM, (user: russk)
//*>


#pragma once

#include "model_builder.h"
#include "axi_protocol.h"

class axi_bus_t_base: public papoulis::PapoulisBusBaseModel {
public:
  static axi_bus_t_base* create_t(const char* name, long simulation, 
                                        esl::sc_sim::user_model::Arbiter* arbiter = 0);
public:
  axi_bus_t_base(sc_core::sc_module_name& module_name, long simulation,
                       esl::sc_sim::user_model::Arbiter* arbiter = 0);

  enum port_enum {dma_slave = 0, mem_slave = 1, cpu_master = 2, dma_master = 3, code_and_data = 4, console = 5};

protected:
  friend class axi_bus_model;

  /* parameters */
  sc_core::sc_time clock;
  sc_core::sc_time axi_clock;
  double nominal_voltage;
  bool port_enable;
  bool verbose_parameters;
  bool dmi_enabled;
  const char* warning_level;
  const char* layers;
  const char* slave_sets;
  unsigned int write_broadcast;
  unsigned int dma_slave_priority;
  unsigned long long dma_slave_base_address;
  unsigned long long dma_slave_size;
  unsigned int dma_slave_subtract_base_address;
  unsigned int dma_slave_secure;
  const char* dma_slave_additional_ranges;
  unsigned int dma_slave_latency;
  unsigned int mem_slave_priority;
  unsigned long long mem_slave_base_address;
  unsigned long long mem_slave_size;
  unsigned int mem_slave_subtract_base_address;
  unsigned int mem_slave_secure;
  const char* mem_slave_additional_ranges;
  unsigned int mem_slave_latency;
  unsigned int cpu_master_priority;
  const char* cpu_master_vmap;
  unsigned int dma_master_priority;
  const char* dma_master_vmap;
  unsigned int code_and_data_priority;
  unsigned long long code_and_data_base_address;
  unsigned long long code_and_data_size;
  unsigned int code_and_data_subtract_base_address;
  unsigned int code_and_data_secure;
  const char* code_and_data_additional_ranges;
  unsigned int code_and_data_latency;
  unsigned int console_priority;
  unsigned long long console_base_address;
  unsigned long long console_size;
  unsigned int console_subtract_base_address;
  unsigned int console_secure;
  const char* console_additional_ranges;
  unsigned int console_latency;

protected:
  long m_simulation;
  
protected:
  void createDecoder(void* userRunningModel);
  
public:
  /* schedule functions */
  void schedule_axi_READ
    (long portIndex,
     sc_dt::uint64 delay,
     long& burstSize,
     esl::include::transaction_power& power , long TR_ID, long ARADDR, long* RDATA, long ARSIZE, long block_size, long ARBURST, long ARLEN, long ARLOCK);
  void schedule_axi_WRITE
    (long portIndex,
     sc_dt::uint64 delay,
     long& burstSize,
     esl::include::transaction_power& power , long TR_ID, long AWADDR, long* WDATA, long AWSIZE, long block_size, long AWBURST, long AWLEN, long AWLOCK);
public:
  /* called when "params.m_phase" is sent through the "port_index" port */
  virtual void sent_phase_cb(unsigned port_index,
                             esl::sc_sim::mb_cb_params& params) {
    sent_phase_cb(port_index, 
                  params.get_payload(), 
                  params.get_phase(), 
                  params.get_time());
  }
                             
  /* called when "params.m_phase" is received by the "port_index" port */
  virtual void received_phase_cb(unsigned port_index,
                                 esl::sc_sim::mb_cb_params& params) {
    received_phase_cb(port_index, 
                      params.get_payload(), 
                      params.get_phase(), 
                      params.get_time());
  }
                             
  /* called when "params.m_phase" is sent through the "master_port_index".
     "params.m_t" is the time (in ps) between the current time
     and the time "params.m_phase" was received by the "slave_port_index */
  virtual void forward_arbitration_cb(unsigned master_port_index,
                                        unsigned slave_port_index,
                                      esl::sc_sim::mb_cb_params& params) {
    forward_arbitration_cb(master_port_index, 
                           slave_port_index,
                           params.get_payload(), 
                           params.get_phase(), 
                           mb::sysc::sc_time_to_ps(params.get_time()));
  }

  /* called when "params.m_phase" is sent through the "slave_port_index".
     "params.m_t" is the time (in ps) between the current time
     and the time "params.m_phase" was received by the "master_port_index */
  virtual void backward_arbitration_cb(unsigned slave_port_index,
                                       unsigned master_port_index,
                                       esl::sc_sim::mb_cb_params& params) {
    backward_arbitration_cb(slave_port_index,
                            master_port_index,
                            params.get_payload(), 
                            params.get_phase(), 
                            mb::sysc::sc_time_to_ps(params.get_time()));
  }
                             

  /* old interface */
  
  virtual void sent_phase_cb(unsigned port_index,
                             tlm::tlm_generic_payload& trans,
                             tlm::tlm_phase& phase, sc_core::sc_time& t) {}
  
  virtual void received_phase_cb(unsigned port_index,
                             tlm::tlm_generic_payload& trans,
                                 tlm::tlm_phase& phase, sc_core::sc_time& t) {}
  
  virtual void forward_arbitration_cb(unsigned master_port_index,
                                      unsigned slave_port_index,
                                      tlm::tlm_generic_payload& trans,
                                      tlm::tlm_phase& phase,
                                      unsigned long long forward_arbitration_time) {}
  
  virtual void backward_arbitration_cb(unsigned slave_port_index,
                                       unsigned master_port_index,
                                       tlm::tlm_generic_payload& trans,
                                       tlm::tlm_phase& phase,
                                       unsigned long long backward_arbitration_time) {}

  // The following callbacks are called whenever there is a transaction start or end in the port

  virtual void accept_axi_READ
    (long port_index,
     sc_dt::int64 time,
     long& burst_size,
     sc_dt::uint64& TR_ID,
     sc_dt::uint64 ARADDR,
     sc_dt::uint64 RDATA,
     sc_dt::uint64& ARSIZE,
     sc_dt::uint64 block_size,
     sc_dt::uint64& ARBURST,
     sc_dt::uint64& ARLEN,
     sc_dt::uint64& ARLOCK) = 0;
  virtual void end_axi_READ
    (long port_index,
     sc_dt::uint64 time,
     long& burst_size,
     sc_dt::uint64& TR_ID,
     sc_dt::uint64 ARADDR,
     sc_dt::uint64 RDATA,
     sc_dt::uint64& ARSIZE,
     sc_dt::uint64 block_size,
     sc_dt::uint64& ARBURST,
     sc_dt::uint64& ARLEN,
     sc_dt::uint64& ARLOCK) = 0;

  virtual void accept_axi_WRITE
    (long port_index,
     sc_dt::int64 time,
     long& burst_size,
     sc_dt::uint64& TR_ID,
     sc_dt::uint64 AWADDR,
     sc_dt::uint64 WDATA,
     sc_dt::uint64& AWSIZE,
     sc_dt::uint64 block_size,
     sc_dt::uint64& AWBURST,
     sc_dt::uint64& AWLEN,
     sc_dt::uint64& AWLOCK) = 0;
  virtual void end_axi_WRITE
    (long port_index,
     sc_dt::uint64 time,
     long& burst_size,
     sc_dt::uint64& TR_ID,
     sc_dt::uint64 AWADDR,
     sc_dt::uint64 WDATA,
     sc_dt::uint64& AWSIZE,
     sc_dt::uint64 block_size,
     sc_dt::uint64& AWBURST,
     sc_dt::uint64& AWLEN,
     sc_dt::uint64& AWLOCK) = 0;


protected:
  request_type* m_current_request;
private:
  static const unsigned port_count = 6;
  papoulis::SystemCBaseModel::PortDescription port_descriptions[port_count];

protected:
  virtual void vista_trace(bool isStart, request_type* request, long portIndex, sc_dt::uint64 startTime);
 protected:
  std::vector<esl::sc_sim::pipeline_policy*> m_pipeline_vector;
  std::vector<esl::sc_sim::delay_policy*> m_delay_vector;
  std::vector<esl::sc_sim::uniform_bus_policy*> m_bus_vector;
  std::vector<esl::sc_sim::power_policy*> m_power_vector;
  
  static const unsigned user_pipeline_policy_count = (8*1*1);
  papoulis::SystemCBaseModel::UserPipelinePolicyDescription user_pipeline_policy_descriptions[user_pipeline_policy_count];
 public:
  virtual void update_power_parameters(esl::sc_sim::power_policy* handle);
  virtual void update_delay_parameters(esl::sc_sim::delay_policy* handle);
  virtual void update_bus_parameters(esl::sc_sim::uniform_bus_policy* handle);
  virtual void update_pipeline_parameters(esl::sc_sim::pipeline_policy* handle);
public:
  virtual unsigned get_layer(unsigned port_index);
  virtual request_type* get_current_request();
  virtual unsigned get_slave_port_index();
  virtual bool portHasRegisters(unsigned portIndex) {return false;}
  
  virtual bool triggerRegistersGotHit(unsigned portIndex, tlm::tlm_generic_payload& trans) {
    return false;
  }

  virtual const char* get_library_name() {return "models";}
  virtual const char* get_model_vendor() {return "Mentor.com";}
  virtual const char* get_model_version() {return "1.0";}
  
};

/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected.
//* DO NOT MODIFY THIS FILE.
//*
//* This file contains the PVT class for axi_bus.
//* It connects between the PV and T models.
//* Your top-level design should instantiate this model.
//* 
//* In order to synchronize the activty between the PV and the T models, every 
//* PV transaction is monitored and queued in the T sync ports.
//* Whenever a synchronization point is reached, the T models are executed and 
//* the corresponding T transactions are launched.
//* A synchronization point is reached whenever there is a wait statement on a testbench thread. 
//*
//* Model Builder version: 5.1.0
//* Generated on: Mar. 09, 2022 11:24:25 AM, (user: russk)
//*>


#pragma once

#include "model_builder.h"




 


// forward declaration for pv class

class axi_bus_pv;



using namespace std;

class axi_bus_pvt_param_defaults {
  
public:
  axi_bus_pvt_param_defaults(const char* hier_name) {

    sc_core::sc_time clock;
    sc_core::sc_time axi_clock;
    double nominal_voltage;
    bool port_enable;
    bool verbose_parameters;
    bool dmi_enabled;
    const char* warning_level;
    const char* layers;
    const char* slave_sets;
    unsigned int write_broadcast;
    unsigned int dma_slave_priority;
    unsigned long long dma_slave_base_address;
    unsigned long long dma_slave_size;
    unsigned int dma_slave_subtract_base_address;
    unsigned int dma_slave_secure;
    const char* dma_slave_additional_ranges;
    unsigned int dma_slave_latency;
    unsigned int mem_slave_priority;
    unsigned long long mem_slave_base_address;
    unsigned long long mem_slave_size;
    unsigned int mem_slave_subtract_base_address;
    unsigned int mem_slave_secure;
    const char* mem_slave_additional_ranges;
    unsigned int mem_slave_latency;
    unsigned int cpu_master_priority;
    const char* cpu_master_vmap;
    unsigned int dma_master_priority;
    const char* dma_master_vmap;
    unsigned int code_and_data_priority;
    unsigned long long code_and_data_base_address;
    unsigned long long code_and_data_size;
    unsigned int code_and_data_subtract_base_address;
    unsigned int code_and_data_secure;
    const char* code_and_data_additional_ranges;
    unsigned int code_and_data_latency;
    unsigned int console_priority;
    unsigned long long console_base_address;
    unsigned long long console_size;
    unsigned int console_subtract_base_address;
    unsigned int console_secure;
    const char* console_additional_ranges;
    unsigned int console_latency;
    clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("clock", sc_core::sc_time(10, sc_core::SC_NS), hier_name ,"axi_bus");
    axi_clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("axi_clock", clock, hier_name ,"axi_bus");
    nominal_voltage = ::mb::sysc::sdInitParameter<double>("nominal_voltage", 1, hier_name ,"axi_bus");
    port_enable = ::mb::sysc::sdInitParameter<bool>("port_enable", true, hier_name ,"axi_bus");
    verbose_parameters = ::mb::sysc::sdInitParameter<bool>("verbose_parameters", true, hier_name ,"axi_bus");
    dmi_enabled = ::mb::sysc::sdInitParameter<bool>("dmi_enabled", true, hier_name ,"axi_bus");
    warning_level = ::mb::sysc::sdInitParameter<const char*>("warning_level", "WARNING", hier_name ,"axi_bus");
    layers = ::mb::sysc::sdInitParameter<const char*>("layers", "", hier_name ,"axi_bus");
    slave_sets = ::mb::sysc::sdInitParameter<const char*>("slave_sets", "", hier_name ,"axi_bus");
    write_broadcast = ::mb::sysc::sdInitParameter<unsigned int>("write_broadcast", 0, hier_name ,"axi_bus");
    dma_slave_priority = ::mb::sysc::sdInitParameter<unsigned int>("dma_slave_priority", 0, hier_name ,"axi_bus");
    dma_slave_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("dma_slave_base_address", 0x70000000, hier_name ,"axi_bus");
    dma_slave_size = ::mb::sysc::sdInitParameter<unsigned long long>("dma_slave_size", 0x10000, hier_name ,"axi_bus");
    dma_slave_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("dma_slave_subtract_base_address", 1, hier_name ,"axi_bus");
    dma_slave_secure = ::mb::sysc::sdInitParameter<unsigned int>("dma_slave_secure", 0, hier_name ,"axi_bus");
    dma_slave_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("dma_slave_additional_ranges", "", hier_name ,"axi_bus");
    dma_slave_latency = ::mb::sysc::sdInitParameter<unsigned int>("dma_slave_latency", 0, hier_name ,"axi_bus");
    mem_slave_priority = ::mb::sysc::sdInitParameter<unsigned int>("mem_slave_priority", 0, hier_name ,"axi_bus");
    mem_slave_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("mem_slave_base_address", 0x40000000, hier_name ,"axi_bus");
    mem_slave_size = ::mb::sysc::sdInitParameter<unsigned long long>("mem_slave_size", 0x100000, hier_name ,"axi_bus");
    mem_slave_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("mem_slave_subtract_base_address", 1, hier_name ,"axi_bus");
    mem_slave_secure = ::mb::sysc::sdInitParameter<unsigned int>("mem_slave_secure", 0, hier_name ,"axi_bus");
    mem_slave_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("mem_slave_additional_ranges", "", hier_name ,"axi_bus");
    mem_slave_latency = ::mb::sysc::sdInitParameter<unsigned int>("mem_slave_latency", 0, hier_name ,"axi_bus");
    cpu_master_priority = ::mb::sysc::sdInitParameter<unsigned int>("cpu_master_priority", 0, hier_name ,"axi_bus");
    cpu_master_vmap = ::mb::sysc::sdInitParameter<const char*>("cpu_master_vmap", "", hier_name ,"axi_bus");
    dma_master_priority = ::mb::sysc::sdInitParameter<unsigned int>("dma_master_priority", 0, hier_name ,"axi_bus");
    dma_master_vmap = ::mb::sysc::sdInitParameter<const char*>("dma_master_vmap", "", hier_name ,"axi_bus");
    code_and_data_priority = ::mb::sysc::sdInitParameter<unsigned int>("code_and_data_priority", 0, hier_name ,"axi_bus");
    code_and_data_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("code_and_data_base_address", 0, hier_name ,"axi_bus");
    code_and_data_size = ::mb::sysc::sdInitParameter<unsigned long long>("code_and_data_size", 0x10000000, hier_name ,"axi_bus");
    code_and_data_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("code_and_data_subtract_base_address", 1, hier_name ,"axi_bus");
    code_and_data_secure = ::mb::sysc::sdInitParameter<unsigned int>("code_and_data_secure", 0, hier_name ,"axi_bus");
    code_and_data_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("code_and_data_additional_ranges", "", hier_name ,"axi_bus");
    code_and_data_latency = ::mb::sysc::sdInitParameter<unsigned int>("code_and_data_latency", 0, hier_name ,"axi_bus");
    console_priority = ::mb::sysc::sdInitParameter<unsigned int>("console_priority", 0, hier_name ,"axi_bus");
    console_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("console_base_address", 0x60080000, hier_name ,"axi_bus");
    console_size = ::mb::sysc::sdInitParameter<unsigned long long>("console_size", 0x10000, hier_name ,"axi_bus");
    console_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("console_subtract_base_address", 1, hier_name ,"axi_bus");
    console_secure = ::mb::sysc::sdInitParameter<unsigned int>("console_secure", 0, hier_name ,"axi_bus");
    console_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("console_additional_ranges", "", hier_name ,"axi_bus");
    console_latency = ::mb::sysc::sdInitParameter<unsigned int>("console_latency", 0, hier_name ,"axi_bus");
    ::mb::sysc::sdPropagateParameters();
  }

  axi_bus_pvt_param_defaults(const char* hier_name, sc_core::sc_time clock_init, sc_core::sc_time axi_clock_init, double nominal_voltage_init, bool port_enable_init, bool verbose_parameters_init, bool dmi_enabled_init, const char* warning_level_init, const char* layers_init, const char* slave_sets_init, unsigned int write_broadcast_init, unsigned int dma_slave_priority_init, unsigned long long dma_slave_base_address_init, unsigned long long dma_slave_size_init, unsigned int dma_slave_subtract_base_address_init, unsigned int dma_slave_secure_init, const char* dma_slave_additional_ranges_init, unsigned int dma_slave_latency_init, unsigned int mem_slave_priority_init, unsigned long long mem_slave_base_address_init, unsigned long long mem_slave_size_init, unsigned int mem_slave_subtract_base_address_init, unsigned int mem_slave_secure_init, const char* mem_slave_additional_ranges_init, unsigned int mem_slave_latency_init, unsigned int cpu_master_priority_init, const char* cpu_master_vmap_init, unsigned int dma_master_priority_init, const char* dma_master_vmap_init, unsigned int code_and_data_priority_init, unsigned long long code_and_data_base_address_init, unsigned long long code_and_data_size_init, unsigned int code_and_data_subtract_base_address_init, unsigned int code_and_data_secure_init, const char* code_and_data_additional_ranges_init, unsigned int code_and_data_latency_init, unsigned int console_priority_init, unsigned long long console_base_address_init, unsigned long long console_size_init, unsigned int console_subtract_base_address_init, unsigned int console_secure_init, const char* console_additional_ranges_init, unsigned int console_latency_init) {

    sc_core::sc_time clock;
    sc_core::sc_time axi_clock;
    double nominal_voltage;
    bool port_enable;
    bool verbose_parameters;
    bool dmi_enabled;
    const char* warning_level;
    const char* layers;
    const char* slave_sets;
    unsigned int write_broadcast;
    unsigned int dma_slave_priority;
    unsigned long long dma_slave_base_address;
    unsigned long long dma_slave_size;
    unsigned int dma_slave_subtract_base_address;
    unsigned int dma_slave_secure;
    const char* dma_slave_additional_ranges;
    unsigned int dma_slave_latency;
    unsigned int mem_slave_priority;
    unsigned long long mem_slave_base_address;
    unsigned long long mem_slave_size;
    unsigned int mem_slave_subtract_base_address;
    unsigned int mem_slave_secure;
    const char* mem_slave_additional_ranges;
    unsigned int mem_slave_latency;
    unsigned int cpu_master_priority;
    const char* cpu_master_vmap;
    unsigned int dma_master_priority;
    const char* dma_master_vmap;
    unsigned int code_and_data_priority;
    unsigned long long code_and_data_base_address;
    unsigned long long code_and_data_size;
    unsigned int code_and_data_subtract_base_address;
    unsigned int code_and_data_secure;
    const char* code_and_data_additional_ranges;
    unsigned int code_and_data_latency;
    unsigned int console_priority;
    unsigned long long console_base_address;
    unsigned long long console_size;
    unsigned int console_subtract_base_address;
    unsigned int console_secure;
    const char* console_additional_ranges;
    unsigned int console_latency;
    clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("clock", clock_init, hier_name ,"axi_bus");
    axi_clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("axi_clock", axi_clock_init, hier_name ,"axi_bus");
    nominal_voltage = ::mb::sysc::sdInitParameter<double>("nominal_voltage", nominal_voltage_init, hier_name ,"axi_bus");
    port_enable = ::mb::sysc::sdInitParameter<bool>("port_enable", port_enable_init, hier_name ,"axi_bus");
    verbose_parameters = ::mb::sysc::sdInitParameter<bool>("verbose_parameters", verbose_parameters_init, hier_name ,"axi_bus");
    dmi_enabled = ::mb::sysc::sdInitParameter<bool>("dmi_enabled", dmi_enabled_init, hier_name ,"axi_bus");
    warning_level = ::mb::sysc::sdInitParameter<const char*>("warning_level", warning_level_init, hier_name ,"axi_bus");
    layers = ::mb::sysc::sdInitParameter<const char*>("layers", layers_init, hier_name ,"axi_bus");
    slave_sets = ::mb::sysc::sdInitParameter<const char*>("slave_sets", slave_sets_init, hier_name ,"axi_bus");
    write_broadcast = ::mb::sysc::sdInitParameter<unsigned int>("write_broadcast", write_broadcast_init, hier_name ,"axi_bus");
    dma_slave_priority = ::mb::sysc::sdInitParameter<unsigned int>("dma_slave_priority", dma_slave_priority_init, hier_name ,"axi_bus");
    dma_slave_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("dma_slave_base_address", dma_slave_base_address_init, hier_name ,"axi_bus");
    dma_slave_size = ::mb::sysc::sdInitParameter<unsigned long long>("dma_slave_size", dma_slave_size_init, hier_name ,"axi_bus");
    dma_slave_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("dma_slave_subtract_base_address", dma_slave_subtract_base_address_init, hier_name ,"axi_bus");
    dma_slave_secure = ::mb::sysc::sdInitParameter<unsigned int>("dma_slave_secure", dma_slave_secure_init, hier_name ,"axi_bus");
    dma_slave_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("dma_slave_additional_ranges", dma_slave_additional_ranges_init, hier_name ,"axi_bus");
    dma_slave_latency = ::mb::sysc::sdInitParameter<unsigned int>("dma_slave_latency", dma_slave_latency_init, hier_name ,"axi_bus");
    mem_slave_priority = ::mb::sysc::sdInitParameter<unsigned int>("mem_slave_priority", mem_slave_priority_init, hier_name ,"axi_bus");
    mem_slave_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("mem_slave_base_address", mem_slave_base_address_init, hier_name ,"axi_bus");
    mem_slave_size = ::mb::sysc::sdInitParameter<unsigned long long>("mem_slave_size", mem_slave_size_init, hier_name ,"axi_bus");
    mem_slave_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("mem_slave_subtract_base_address", mem_slave_subtract_base_address_init, hier_name ,"axi_bus");
    mem_slave_secure = ::mb::sysc::sdInitParameter<unsigned int>("mem_slave_secure", mem_slave_secure_init, hier_name ,"axi_bus");
    mem_slave_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("mem_slave_additional_ranges", mem_slave_additional_ranges_init, hier_name ,"axi_bus");
    mem_slave_latency = ::mb::sysc::sdInitParameter<unsigned int>("mem_slave_latency", mem_slave_latency_init, hier_name ,"axi_bus");
    cpu_master_priority = ::mb::sysc::sdInitParameter<unsigned int>("cpu_master_priority", cpu_master_priority_init, hier_name ,"axi_bus");
    cpu_master_vmap = ::mb::sysc::sdInitParameter<const char*>("cpu_master_vmap", cpu_master_vmap_init, hier_name ,"axi_bus");
    dma_master_priority = ::mb::sysc::sdInitParameter<unsigned int>("dma_master_priority", dma_master_priority_init, hier_name ,"axi_bus");
    dma_master_vmap = ::mb::sysc::sdInitParameter<const char*>("dma_master_vmap", dma_master_vmap_init, hier_name ,"axi_bus");
    code_and_data_priority = ::mb::sysc::sdInitParameter<unsigned int>("code_and_data_priority", code_and_data_priority_init, hier_name ,"axi_bus");
    code_and_data_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("code_and_data_base_address", code_and_data_base_address_init, hier_name ,"axi_bus");
    code_and_data_size = ::mb::sysc::sdInitParameter<unsigned long long>("code_and_data_size", code_and_data_size_init, hier_name ,"axi_bus");
    code_and_data_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("code_and_data_subtract_base_address", code_and_data_subtract_base_address_init, hier_name ,"axi_bus");
    code_and_data_secure = ::mb::sysc::sdInitParameter<unsigned int>("code_and_data_secure", code_and_data_secure_init, hier_name ,"axi_bus");
    code_and_data_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("code_and_data_additional_ranges", code_and_data_additional_ranges_init, hier_name ,"axi_bus");
    code_and_data_latency = ::mb::sysc::sdInitParameter<unsigned int>("code_and_data_latency", code_and_data_latency_init, hier_name ,"axi_bus");
    console_priority = ::mb::sysc::sdInitParameter<unsigned int>("console_priority", console_priority_init, hier_name ,"axi_bus");
    console_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("console_base_address", console_base_address_init, hier_name ,"axi_bus");
    console_size = ::mb::sysc::sdInitParameter<unsigned long long>("console_size", console_size_init, hier_name ,"axi_bus");
    console_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("console_subtract_base_address", console_subtract_base_address_init, hier_name ,"axi_bus");
    console_secure = ::mb::sysc::sdInitParameter<unsigned int>("console_secure", console_secure_init, hier_name ,"axi_bus");
    console_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("console_additional_ranges", console_additional_ranges_init, hier_name ,"axi_bus");
    console_latency = ::mb::sysc::sdInitParameter<unsigned int>("console_latency", console_latency_init, hier_name ,"axi_bus");

    ::mb::sysc::sdPropagateParameters();
    }

  axi_bus_pvt_param_defaults(const char* hier_name, std::vector<std::pair<char*, unsigned int> > &change_parameters){

    sc_core::sc_time clock;
    sc_core::sc_time axi_clock;
    double nominal_voltage;
    bool port_enable;
    bool verbose_parameters;
    bool dmi_enabled;
    const char* warning_level;
    const char* layers;
    const char* slave_sets;
    unsigned int write_broadcast;
    unsigned int dma_slave_priority;
    unsigned long long dma_slave_base_address;
    unsigned long long dma_slave_size;
    unsigned int dma_slave_subtract_base_address;
    unsigned int dma_slave_secure;
    const char* dma_slave_additional_ranges;
    unsigned int dma_slave_latency;
    unsigned int mem_slave_priority;
    unsigned long long mem_slave_base_address;
    unsigned long long mem_slave_size;
    unsigned int mem_slave_subtract_base_address;
    unsigned int mem_slave_secure;
    const char* mem_slave_additional_ranges;
    unsigned int mem_slave_latency;
    unsigned int cpu_master_priority;
    const char* cpu_master_vmap;
    unsigned int dma_master_priority;
    const char* dma_master_vmap;
    unsigned int code_and_data_priority;
    unsigned long long code_and_data_base_address;
    unsigned long long code_and_data_size;
    unsigned int code_and_data_subtract_base_address;
    unsigned int code_and_data_secure;
    const char* code_and_data_additional_ranges;
    unsigned int code_and_data_latency;
    unsigned int console_priority;
    unsigned long long console_base_address;
    unsigned long long console_size;
    unsigned int console_subtract_base_address;
    unsigned int console_secure;
    const char* console_additional_ranges;
    unsigned int console_latency;
    for (unsigned i =0; i<change_parameters.size(); i++){
      ::mb::sysc::sdInitParameter<unsigned int>(change_parameters[i].first, change_parameters[i].second, hier_name ,"axi_bus");
    }

    clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("clock", sc_core::sc_time(10, sc_core::SC_NS), hier_name ,"axi_bus");
    axi_clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("axi_clock", clock, hier_name ,"axi_bus");
    nominal_voltage = ::mb::sysc::sdInitParameter<double>("nominal_voltage", 1, hier_name ,"axi_bus");
    port_enable = ::mb::sysc::sdInitParameter<bool>("port_enable", true, hier_name ,"axi_bus");
    verbose_parameters = ::mb::sysc::sdInitParameter<bool>("verbose_parameters", true, hier_name ,"axi_bus");
    dmi_enabled = ::mb::sysc::sdInitParameter<bool>("dmi_enabled", true, hier_name ,"axi_bus");
    warning_level = ::mb::sysc::sdInitParameter<const char*>("warning_level", "WARNING", hier_name ,"axi_bus");
    layers = ::mb::sysc::sdInitParameter<const char*>("layers", "", hier_name ,"axi_bus");
    slave_sets = ::mb::sysc::sdInitParameter<const char*>("slave_sets", "", hier_name ,"axi_bus");
    write_broadcast = ::mb::sysc::sdInitParameter<unsigned int>("write_broadcast", 0, hier_name ,"axi_bus");
    dma_slave_priority = ::mb::sysc::sdInitParameter<unsigned int>("dma_slave_priority", 0, hier_name ,"axi_bus");
    dma_slave_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("dma_slave_base_address", 0x70000000, hier_name ,"axi_bus");
    dma_slave_size = ::mb::sysc::sdInitParameter<unsigned long long>("dma_slave_size", 0x10000, hier_name ,"axi_bus");
    dma_slave_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("dma_slave_subtract_base_address", 1, hier_name ,"axi_bus");
    dma_slave_secure = ::mb::sysc::sdInitParameter<unsigned int>("dma_slave_secure", 0, hier_name ,"axi_bus");
    dma_slave_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("dma_slave_additional_ranges", "", hier_name ,"axi_bus");
    dma_slave_latency = ::mb::sysc::sdInitParameter<unsigned int>("dma_slave_latency", 0, hier_name ,"axi_bus");
    mem_slave_priority = ::mb::sysc::sdInitParameter<unsigned int>("mem_slave_priority", 0, hier_name ,"axi_bus");
    mem_slave_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("mem_slave_base_address", 0x40000000, hier_name ,"axi_bus");
    mem_slave_size = ::mb::sysc::sdInitParameter<unsigned long long>("mem_slave_size", 0x100000, hier_name ,"axi_bus");
    mem_slave_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("mem_slave_subtract_base_address", 1, hier_name ,"axi_bus");
    mem_slave_secure = ::mb::sysc::sdInitParameter<unsigned int>("mem_slave_secure", 0, hier_name ,"axi_bus");
    mem_slave_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("mem_slave_additional_ranges", "", hier_name ,"axi_bus");
    mem_slave_latency = ::mb::sysc::sdInitParameter<unsigned int>("mem_slave_latency", 0, hier_name ,"axi_bus");
    cpu_master_priority = ::mb::sysc::sdInitParameter<unsigned int>("cpu_master_priority", 0, hier_name ,"axi_bus");
    cpu_master_vmap = ::mb::sysc::sdInitParameter<const char*>("cpu_master_vmap", "", hier_name ,"axi_bus");
    dma_master_priority = ::mb::sysc::sdInitParameter<unsigned int>("dma_master_priority", 0, hier_name ,"axi_bus");
    dma_master_vmap = ::mb::sysc::sdInitParameter<const char*>("dma_master_vmap", "", hier_name ,"axi_bus");
    code_and_data_priority = ::mb::sysc::sdInitParameter<unsigned int>("code_and_data_priority", 0, hier_name ,"axi_bus");
    code_and_data_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("code_and_data_base_address", 0, hier_name ,"axi_bus");
    code_and_data_size = ::mb::sysc::sdInitParameter<unsigned long long>("code_and_data_size", 0x10000000, hier_name ,"axi_bus");
    code_and_data_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("code_and_data_subtract_base_address", 1, hier_name ,"axi_bus");
    code_and_data_secure = ::mb::sysc::sdInitParameter<unsigned int>("code_and_data_secure", 0, hier_name ,"axi_bus");
    code_and_data_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("code_and_data_additional_ranges", "", hier_name ,"axi_bus");
    code_and_data_latency = ::mb::sysc::sdInitParameter<unsigned int>("code_and_data_latency", 0, hier_name ,"axi_bus");
    console_priority = ::mb::sysc::sdInitParameter<unsigned int>("console_priority", 0, hier_name ,"axi_bus");
    console_base_address = ::mb::sysc::sdInitParameter<unsigned long long>("console_base_address", 0x60080000, hier_name ,"axi_bus");
    console_size = ::mb::sysc::sdInitParameter<unsigned long long>("console_size", 0x10000, hier_name ,"axi_bus");
    console_subtract_base_address = ::mb::sysc::sdInitParameter<unsigned int>("console_subtract_base_address", 1, hier_name ,"axi_bus");
    console_secure = ::mb::sysc::sdInitParameter<unsigned int>("console_secure", 0, hier_name ,"axi_bus");
    console_additional_ranges = ::mb::sysc::sdInitParameter<const char*>("console_additional_ranges", "", hier_name ,"axi_bus");
    console_latency = ::mb::sysc::sdInitParameter<unsigned int>("console_latency", 0, hier_name ,"axi_bus");  

    ::mb::sysc::sdPropagateParameters();
  }
  
  //void set_clock (

};


class axi_bus_pvt : public esl::sc_sim::PVTBaseModel, 
                          public mb::utl::cb_owner,
                          private axi_bus_pvt_param_defaults {

 public:
  typedef axi_bus_pvt self_type;

 public: 
  // Constructor
  axi_bus_pvt(sc_core::sc_module_name module_name); 
  axi_bus_pvt(sc_core::sc_module_name module_name, sc_core::sc_time clock_init, sc_core::sc_time axi_clock_init, double nominal_voltage_init, bool port_enable_init, bool verbose_parameters_init, bool dmi_enabled_init, const char* warning_level_init, const char* layers_init, const char* slave_sets_init, unsigned int write_broadcast_init, unsigned int dma_slave_priority_init, unsigned long long dma_slave_base_address_init, unsigned long long dma_slave_size_init, unsigned int dma_slave_subtract_base_address_init, unsigned int dma_slave_secure_init, const char* dma_slave_additional_ranges_init, unsigned int dma_slave_latency_init, unsigned int mem_slave_priority_init, unsigned long long mem_slave_base_address_init, unsigned long long mem_slave_size_init, unsigned int mem_slave_subtract_base_address_init, unsigned int mem_slave_secure_init, const char* mem_slave_additional_ranges_init, unsigned int mem_slave_latency_init, unsigned int cpu_master_priority_init, const char* cpu_master_vmap_init, unsigned int dma_master_priority_init, const char* dma_master_vmap_init, unsigned int code_and_data_priority_init, unsigned long long code_and_data_base_address_init, unsigned long long code_and_data_size_init, unsigned int code_and_data_subtract_base_address_init, unsigned int code_and_data_secure_init, const char* code_and_data_additional_ranges_init, unsigned int code_and_data_latency_init, unsigned int console_priority_init, unsigned long long console_base_address_init, unsigned long long console_size_init, unsigned int console_subtract_base_address_init, unsigned int console_secure_init, const char* console_additional_ranges_init, unsigned int console_latency_init); 
  axi_bus_pvt(sc_core::sc_module_name module_name, std::vector<std::pair<char*, unsigned int> > &change_parameters);
  ~axi_bus_pvt(); 

 
 public:
 
    //access the T instance
  inline axi_bus_t_base* getT() const {
    return m_axi_bus_t;
  }

  
  //access the PV instance
  inline axi_bus_pv* getPV() const {
    return m_axi_bus_pv;
  }

  virtual const SystemCBaseModel* getSystemCBaseModel() const {
    
    return getT();
    
    
  }
  virtual SystemCBaseModel* getSystemCBaseModel() {
    
    return getT();
    
    
  }
  

 private:
  void bind();
  

  void b_transport_outside_dma_slave(tlm::tlm_generic_payload& p, sc_core::sc_time& t);
  unsigned int transport_dbg_outside_dma_slave(tlm::tlm_generic_payload& p);
  void b_transport_outside_mem_slave(tlm::tlm_generic_payload& p, sc_core::sc_time& t);
  unsigned int transport_dbg_outside_mem_slave(tlm::tlm_generic_payload& p);
  void b_transport_outside_code_and_data(tlm::tlm_generic_payload& p, sc_core::sc_time& t);
  unsigned int transport_dbg_outside_code_and_data(tlm::tlm_generic_payload& p);
  void b_transport_outside_console(tlm::tlm_generic_payload& p, sc_core::sc_time& t);
  unsigned int transport_dbg_outside_console(tlm::tlm_generic_payload& p); 

 private:
  
  
  //T instance
  axi_bus_t_base* m_axi_bus_t;
  
  
  //PV instance
  axi_bus_pv* m_axi_bus_pv;

 public:
  // External ports

  typedef mb::tlm20::interface_initiator_socket<32, axi_protocol_types, 1, sc_core::SC_ONE_OR_MORE_BOUND> dma_slave_type;
  dma_slave_type dma_slave;
  typedef mb::tlm20::interface_initiator_socket<32, axi_protocol_types, 1, sc_core::SC_ONE_OR_MORE_BOUND> mem_slave_type;
  mem_slave_type mem_slave;
  typedef mb::tlm20::interface_initiator_socket<32, axi_protocol_types, 1, sc_core::SC_ONE_OR_MORE_BOUND> code_and_data_type;
  code_and_data_type code_and_data;
  typedef mb::tlm20::interface_initiator_socket<32, axi_protocol_types, 1, sc_core::SC_ONE_OR_MORE_BOUND> console_type;
  console_type console;
  typedef mb::tlm20::interface_target_socket<32, axi_protocol_types, 1, sc_core::SC_ONE_OR_MORE_BOUND> cpu_master_type;
  cpu_master_type cpu_master;
  typedef mb::tlm20::interface_target_socket<32, axi_protocol_types, 1, sc_core::SC_ONE_OR_MORE_BOUND> dma_master_type;
  dma_master_type dma_master;

 private:
  // PV connection ports

  typedef mb::tlm20::target_socket_cb<32> dma_slave_entry_type;
  dma_slave_entry_type dma_slave_entry;
  typedef mb::tlm20::target_socket_cb<32> mem_slave_entry_type;
  mem_slave_entry_type mem_slave_entry;
  typedef mb::tlm20::target_socket_cb<32> code_and_data_entry_type;
  code_and_data_entry_type code_and_data_entry;
  typedef mb::tlm20::target_socket_cb<32> console_entry_type;
  console_entry_type console_entry;
  typedef mb::tlm20::initiator_socket_cb<32> cpu_master_entry_type;
  cpu_master_entry_type cpu_master_entry;
  typedef mb::tlm20::initiator_socket_cb<32> dma_master_entry_type;
  dma_master_entry_type dma_master_entry;      

 public:
  sc_core::sc_time dma_slave_time;

  sc_core::sc_time mem_slave_time;

  sc_core::sc_time code_and_data_time;

  sc_core::sc_time console_time;



 private:

  struct dma_slave_nb_connector : public tlm::tlm_fw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    axi_bus_pvt& m_owner;
    
    dma_slave_nb_connector(axi_bus_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_fw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.dma_slave.nb_transport_fw((axi_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.dma_slave;
    }
  };
  friend struct dma_slave_nb_connector;
  dma_slave_nb_connector m_dma_slave_nb_connector;

  struct mem_slave_nb_connector : public tlm::tlm_fw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    axi_bus_pvt& m_owner;
    
    mem_slave_nb_connector(axi_bus_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_fw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.mem_slave.nb_transport_fw((axi_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.mem_slave;
    }
  };
  friend struct mem_slave_nb_connector;
  mem_slave_nb_connector m_mem_slave_nb_connector;

  struct code_and_data_nb_connector : public tlm::tlm_fw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    axi_bus_pvt& m_owner;
    
    code_and_data_nb_connector(axi_bus_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_fw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.code_and_data.nb_transport_fw((axi_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.code_and_data;
    }
  };
  friend struct code_and_data_nb_connector;
  code_and_data_nb_connector m_code_and_data_nb_connector;

  struct console_nb_connector : public tlm::tlm_fw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    axi_bus_pvt& m_owner;
    
    console_nb_connector(axi_bus_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_fw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.console.nb_transport_fw((axi_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.console;
    }
  };
  friend struct console_nb_connector;
  console_nb_connector m_console_nb_connector;



  struct cpu_master_nb_connector : public tlm::tlm_bw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    axi_bus_pvt& m_owner;
    
    cpu_master_nb_connector(axi_bus_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_bw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.cpu_master.nb_transport_bw((axi_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.cpu_master;
    }
  };
  friend struct cpu_master_nb_connector;
  cpu_master_nb_connector m_cpu_master_nb_connector;

  struct dma_master_nb_connector : public tlm::tlm_bw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    axi_bus_pvt& m_owner;
    
    dma_master_nb_connector(axi_bus_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_bw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.dma_master.nb_transport_bw((axi_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.dma_master;
    }
  };
  friend struct dma_master_nb_connector;
  dma_master_nb_connector m_dma_master_nb_connector;

  

  tlm::tlm_sync_enum receive_nb_transport_dma_slave(tlm::tlm_generic_payload& trans,
                                                       tlm::tlm_phase& phase,
                                                    sc_core::sc_time& t) {
    return getT()->receive_nb_transport(0, trans, phase, t);
  }
  tlm::tlm_sync_enum receive_nb_transport_mem_slave(tlm::tlm_generic_payload& trans,
                                                       tlm::tlm_phase& phase,
                                                    sc_core::sc_time& t) {
    return getT()->receive_nb_transport(1, trans, phase, t);
  }
  tlm::tlm_sync_enum receive_nb_transport_code_and_data(tlm::tlm_generic_payload& trans,
                                                       tlm::tlm_phase& phase,
                                                    sc_core::sc_time& t) {
    return getT()->receive_nb_transport(4, trans, phase, t);
  }
  tlm::tlm_sync_enum receive_nb_transport_console(tlm::tlm_generic_payload& trans,
                                                       tlm::tlm_phase& phase,
                                                    sc_core::sc_time& t) {
    return getT()->receive_nb_transport(5, trans, phase, t);
  }
  tlm::tlm_sync_enum receive_nb_transport_cpu_master(tlm::tlm_generic_payload& trans,
                                                    tlm::tlm_phase& phase,
                                                    sc_core::sc_time& t) {
    return getT()->receive_nb_transport(2, trans, phase, t);
  }
  tlm::tlm_sync_enum receive_nb_transport_dma_master(tlm::tlm_generic_payload& trans,
                                                    tlm::tlm_phase& phase,
                                                    sc_core::sc_time& t) {
    return getT()->receive_nb_transport(3, trans, phase, t);
  }


};




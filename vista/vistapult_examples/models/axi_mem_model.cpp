
/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* This class contains the infrastructure to define the behavior of the component.
//* The axi_mem_pv will be derived from this class.
//*
//* Model Builder version: 5.1.0
//* Generated on: Jul. 26, 2022 01:49:41 PM, (user: russk)
//*>


#include "axi_mem_model.h"

#ifdef MODEL_BUILDER_VERSION_NUMBER
#if 5100 != MODEL_BUILDER_VERSION_NUMBER
#error "This model was generated using Model Builder version: 5.1.0. Please regenerate model."
#endif
#else
#error "Please regenerate model."
#endif

using namespace sc_core;
using namespace sc_dt;
using namespace std;



axi_mem_pv_base::axi_mem_pv_base(sc_module_name& module_name) :
  axi_mem_pv_base_mb_compatibility(module_name),
  axi_mem_pv_base_parameters(this),
  VISTA_MB_PV_INIT_MEMBER(slave) {
  
  
    m_mb_debug = new mb::utl::mb_debug_handler(mb::utl::mb_debug_handler::MB_DEBUG_PORT_TYPE, this->name());


  // slave - not a vector port
  unsigned u = 0;



  payload_on_stack = 0;
  payload_for_token = 0;
  reset_registers();
  
  // reset value for output signals

  // reset value for input signals

  // slave bw binding 
  VISTA_MB_PV_BIND_FW_PROCESS_TO_TARGET(slave);
  // slave bw callbacks 
  VISTA_MB_PV_REGISTER_SELF_FW_PROCESS_CALLBACKS(slave);

}


axi_mem_pv_base::~axi_mem_pv_base() {
  
  if(m_mb_debug != NULL) delete m_mb_debug;
}



void axi_mem_pv_base::reset_registers() {
  // reset all registers
  unsigned u = 0;


}


void axi_mem_pv_base::reset_model() {
  
  reset_registers();
  // reset value for output signals

  // reset value for input signals



}

axi_mem_pv_base_parameters::axi_mem_pv_base_parameters(sc_object* object) :
  m_object(object),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, clock, sc_core::sc_time(10, sc_core::SC_NS), "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, axi_clock, clock, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, nominal_voltage, 1, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_debug, false, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_debug_start_time, sc_core::sc_time(0, sc_core::SC_NS), "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_debug_end_time, sc_core::sc_time(0, sc_core::SC_NS), "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_debug_address_read, "0x10:0x0", "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_debug_address_write, "0x10:0x0", "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, port_enable, true, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, call_to_default_if, false, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, verbose_parameters, true, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, dmi_enabled, true, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, warning_level, "WARNING", "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, slave_pipeline_length, 2, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, slave_outstanding, 1, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, slave_read_data_queue_size, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, slave_write_data_queue_size, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, size_in_bytes, 0x1000000, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, endianness, "host", "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, read_latency, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, write_latency, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, disable_fast_memory, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, disable_dmi_memory, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_memory_chunk_size, 0x100000, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_memory_file_storage, "", "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_memory_file_storage_load, "", "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_memory_paged, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_memory_max_loaded_num_chunks, 10, "axi_mem")
{
  if(verbose_parameters) print_parameters();
}

void axi_mem_pv_base_parameters::print_parameters()
{
  const char* name;
  if (!strcmp(m_object->basename(), "PV"))
    name = m_object->get_parent_object()->name();
  else
    name = m_object->name();

  std::cout.setf(ios::hex, ios::basefield);
  std::cout.setf(ios::showbase);
  std::cout << name << "::parameters:\n";
  std::cout << "\tclock = " << clock << "\n";
  std::cout << "\taxi_clock = " << axi_clock << "\n";
  std::cout << "\tnominal_voltage = " << nominal_voltage << "\n";
  std::cout << "\tmb_debug = " << mb_debug << "\n";
  std::cout << "\tmb_debug_start_time = " << mb_debug_start_time << "\n";
  std::cout << "\tmb_debug_end_time = " << mb_debug_end_time << "\n";
  std::cout << "\tmb_debug_address_read = " << mb_debug_address_read << "\n";
  std::cout << "\tmb_debug_address_write = " << mb_debug_address_write << "\n";
  std::cout << "\tport_enable = " << port_enable << "\n";
  std::cout << "\tcall_to_default_if = " << call_to_default_if << "\n";
  std::cout << "\tverbose_parameters = " << verbose_parameters << "\n";
  std::cout << "\tdmi_enabled = " << dmi_enabled << "\n";
  std::cout << "\twarning_level = " << warning_level << "\n";
  std::cout << "\tslave_pipeline_length = " << slave_pipeline_length << "\n";
  std::cout << "\tslave_outstanding = " << slave_outstanding << "\n";
  std::cout << "\tslave_read_data_queue_size = " << slave_read_data_queue_size << "\n";
  std::cout << "\tslave_write_data_queue_size = " << slave_write_data_queue_size << "\n";
  std::cout << "\tsize_in_bytes = " << size_in_bytes << "\n";
  std::cout << "\tendianness = " << endianness << "\n";
  std::cout << "\tread_latency = " << read_latency << "\n";
  std::cout << "\twrite_latency = " << write_latency << "\n";
  std::cout << "\tdisable_fast_memory = " << disable_fast_memory << "\n";
  std::cout << "\tdisable_dmi_memory = " << disable_dmi_memory << "\n";
  std::cout << "\tmb_memory_chunk_size = " << mb_memory_chunk_size << "\n";
  std::cout << "\tmb_memory_file_storage = " << mb_memory_file_storage << "\n";
  std::cout << "\tmb_memory_file_storage_load = " << mb_memory_file_storage_load << "\n";
  std::cout << "\tmb_memory_paged = " << mb_memory_paged << "\n";
  std::cout << "\tmb_memory_max_loaded_num_chunks = " << mb_memory_max_loaded_num_chunks << "\n";
  std::cout.unsetf(ios::showbase);
  std::cout.setf(ios::dec, ios::basefield);
  std::cout << std::endl;
}





/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/


//constructor
axi_mem_base1_pv::axi_mem_base1_pv(sc_module_name module_name)
  : axi_mem_pv_base(module_name),
  m_memory_if(this, size_in_bytes, mb::sysc::get_instance_endianness(), 32, this)
{
  if (::mb::sysc::sdParameterExists("read_latency")) {
    m_memory_if.set_read_latency(::mb::sysc::sdGetParameterAsTime("read_latency"));
  }

  if (::mb::sysc::sdParameterExists("write_latency")) {
    m_memory_if.set_write_latency(::mb::sysc::sdGetParameterAsTime("write_latency"));
  }
  mb::sysc::add_parameter_listener(this->name(), "disable_dmi_memory", this);
  mb::sysc::add_parameter_listener(this->name(), "disable_fast_memory", this);
}

//virtual 
void axi_mem_base1_pv::slave_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t) {
  sc_core::sc_time start_t = t;
  m_memory_if.b_transport(trans, t);
  if (t > start_t) {
    // when policy dynamic dont use read/write latency
    if (getPVTBaseModel() && getPVTBaseModel()->getCurrentScene()) {
      t = start_t;
    }
  }
}

//virtual 
unsigned axi_mem_base1_pv::slave_callback_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
  return m_memory_if.transport_dbg(trans);
}

//virtual 
bool axi_mem_base1_pv::slave_get_direct_memory_ptr_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans,
                                                                           tlm::tlm_dmi& dmiData) {
  bool status = m_memory_if.get_direct_mem_ptr(trans, dmiData);

  if(!mb::tlm20::is_fast_mode()) { // VISTA-3087
    bool latency_from_parameters = 
      dmiData.get_read_latency() > sc_core::SC_ZERO_TIME ||
      dmiData.get_write_latency() > sc_core::SC_ZERO_TIME;
    if (getPVTBaseModel() && status && !latency_from_parameters)
      get_dmi_delay_cb(trans, dmiData, slave_idx);
  }
  return status;
}

//virtual
void axi_mem_base1_pv::do_invalidate_direct_mem_ptr(sc_dt::uint64 start_range, sc_dt::uint64 end_range) {

  slave->invalidate_direct_mem_ptr(start_range, end_range);

}

void axi_mem_base1_pv::parameter_changed(const std::string& parameter,
                                 const std::string& old_value,
                                                       const std::string& new_value) {

  if (!strcasecmp(parameter.c_str(), "disable_dmi_memory")) {
    
    if (!strcasecmp(new_value.c_str(), "1")) {
      m_memory_if.disable_dmi(true);
    }
    else {
      m_memory_if.disable_dmi(false);
    }
      
    do_invalidate_direct_mem_ptr(0, ~1ULL);  
    return;
  } 
  if (!strcasecmp(parameter.c_str(), "disable_fast_memory")) {
    
    if (!strcasecmp(new_value.c_str(), "1")) {
      m_memory_if.disable_fast(true);
    }
    else {
       m_memory_if.disable_fast(false);
    }
      
    do_invalidate_direct_mem_ptr(0, ~1ULL);  
    return;
  } 
}

/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* 
//* Any change in parameters, policies, ports, protocols, etc. will change this file
//* upon generation of the timing model (using generate_timing_model command).
//* The axi_mem_t will be derived from this class.
//*
//* Model Builder version: 5.1.0
//* Generated on: Jul. 26, 2022 01:49:41 PM, (user: russk)
//*>




#include "axi_mem_model.h"
#include <math.h>
#include <stdlib.h>

using namespace esl::tlm_sim;
using namespace esl::sc_sim;
using namespace std;
using namespace sc_dt;
using namespace sc_core;





void axi_mem_t_base::start_transaction_axi_READ
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();
  
  
  this->accept_axi_READ
    (port_index, 
     startTime, 
     burstSize, 
     parameters[0], 
     parameters[1], 
     parameters[2], 
     parameters[3], 
     parameters[4], 
     parameters[5], 
     parameters[6], 
     parameters[7]);
}


void axi_mem_t_base::end_transaction_axi_READ
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();                                                                         
  
  this->end_axi_READ
    (port_index,
     endTime,
     burstSize,
     parameters[0],
     parameters[1],
     parameters[2],
     parameters[3],
     parameters[4],
     parameters[5],
     parameters[6],
     parameters[7]);
}

void axi_mem_t_base::start_transaction_axi_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();
  
  
  this->accept_axi_WRITE
    (port_index, 
     startTime, 
     burstSize, 
     parameters[0], 
     parameters[1], 
     parameters[2], 
     parameters[3], 
     parameters[4], 
     parameters[5], 
     parameters[6], 
     parameters[7]);
}


void axi_mem_t_base::end_transaction_axi_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();                                                                         
  
  this->end_axi_WRITE
    (port_index,
     endTime,
     burstSize,
     parameters[0],
     parameters[1],
     parameters[2],
     parameters[3],
     parameters[4],
     parameters[5],
     parameters[6],
     parameters[7]);
}

 axi_mem_t_base::TransactionCallbackFunctionPointer axi_mem_t_base::getTransactionCallback(unsigned callbackIndex) {
  static TransactionCallbackFunctionPointer funcArray[] = {
    static_cast<TransactionCallbackFunctionPointer>(&axi_mem_t_base::start_transaction_axi_READ),
    static_cast<TransactionCallbackFunctionPointer>(&axi_mem_t_base::start_transaction_axi_WRITE),
    static_cast<TransactionCallbackFunctionPointer>(&axi_mem_t_base::end_transaction_axi_READ),
    static_cast<TransactionCallbackFunctionPointer>(&axi_mem_t_base::end_transaction_axi_WRITE),
    0
  };
  if(callbackIndex >= sizeof(funcArray) / sizeof(*funcArray) - 1)
    return 0;
  return funcArray[callbackIndex];
}


config::real80 axi_mem_t_base::get_state_power() {
  config::real80 power_value = 0;

  

  return power_value;
}


axi_mem_t_base::axi_mem_t_base(sc_module_name& module_name, long simulation) :
  papoulis::SystemCBaseModel(module_name),
  SD_INITIALIZE_PARAMETER(clock, sc_core::sc_time(10, sc_core::SC_NS), "axi_mem"),
  SD_INITIALIZE_PARAMETER(axi_clock, clock, "axi_mem"),
  SD_INITIALIZE_PARAMETER(nominal_voltage, 1, "axi_mem"),
  SD_INITIALIZE_PARAMETER(mb_debug, false, "axi_mem"),
  SD_INITIALIZE_PARAMETER(mb_debug_start_time, sc_core::sc_time(0, sc_core::SC_NS), "axi_mem"),
  SD_INITIALIZE_PARAMETER(mb_debug_end_time, sc_core::sc_time(0, sc_core::SC_NS), "axi_mem"),
  SD_INITIALIZE_PARAMETER(mb_debug_address_read, "0x10:0x0", "axi_mem"),
  SD_INITIALIZE_PARAMETER(mb_debug_address_write, "0x10:0x0", "axi_mem"),
  SD_INITIALIZE_PARAMETER(port_enable, true, "axi_mem"),
  SD_INITIALIZE_PARAMETER(call_to_default_if, false, "axi_mem"),
  SD_INITIALIZE_PARAMETER(verbose_parameters, true, "axi_mem"),
  SD_INITIALIZE_PARAMETER(dmi_enabled, true, "axi_mem"),
  SD_INITIALIZE_PARAMETER(warning_level, "WARNING", "axi_mem"),
  SD_INITIALIZE_PARAMETER(slave_pipeline_length, 2, "axi_mem"),
  SD_INITIALIZE_PARAMETER(slave_outstanding, 1, "axi_mem"),
  SD_INITIALIZE_PARAMETER(slave_read_data_queue_size, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER(slave_write_data_queue_size, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER(size_in_bytes, 0x1000000, "axi_mem"),
  SD_INITIALIZE_PARAMETER(endianness, "host", "axi_mem"),
  SD_INITIALIZE_PARAMETER(read_latency, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER(write_latency, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER(disable_fast_memory, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER(disable_dmi_memory, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER(mb_memory_chunk_size, 0x100000, "axi_mem"),
  SD_INITIALIZE_PARAMETER(mb_memory_file_storage, "", "axi_mem"),
  SD_INITIALIZE_PARAMETER(mb_memory_file_storage_load, "", "axi_mem"),
  SD_INITIALIZE_PARAMETER(mb_memory_paged, 0, "axi_mem"),
  SD_INITIALIZE_PARAMETER(mb_memory_max_loaded_num_chunks, 10, "axi_mem"),
  m_simulation(simulation)
{
  bool separate_read_channel = false;  
  bool separate_write_channel = false;
  char* buffer = 0;
  unsigned port_index = 0;
  
  fix_clock_parameter(axi_clock, "axi_clock");
    separate_read_channel = false;
    separate_write_channel = false;
    buffer = new char[15];
    sprintf(buffer, "slave");
    port_index = slave;
    port_descriptions[port_index].port_name = buffer;
    separate_read_channel = true;
    port_descriptions[port_index].port_kind = PortDescription::READ_CHANNEL_PORT;
    separate_write_channel = true;
    port_descriptions[port_index].port_kind = PortDescription::WRITE_CHANNEL_PORT;
    if (separate_write_channel && separate_read_channel)
      port_descriptions[port_index].port_kind = PortDescription::SEPARATE_READ_WRIE_CHANNEL_PORT;
    port_descriptions[port_index].is_read_write_address_channel = 0;
    
    port_descriptions[port_index].is_master_port = 0;
    port_descriptions[port_index].is_signal_port = 0;
    port_descriptions[port_index].port_width = ((32 + 7) >> 3);
    port_descriptions[port_index].port_cast  = 0;
    port_descriptions[port_index].port_width_in_bits = 32;
    port_descriptions[port_index].protocol_name = "axi";
    port_descriptions[port_index].ipxactBusDef.vendor = "amba.com";
    port_descriptions[port_index].ipxactBusDef.library = "AMBA3";
    port_descriptions[port_index].ipxactBusDef.name = "AXI";
    port_descriptions[port_index].ipxactBusDef.version = "r1p0_5"; 
    port_descriptions[port_index].ipxactAbstrDef.vendor = "Mentor.com";
    port_descriptions[port_index].ipxactAbstrDef.library = "Lib_ipxact";
    port_descriptions[port_index].ipxactAbstrDef.name = "AXI_tlm20";
    port_descriptions[port_index].ipxactAbstrDef.version = "1.0";
    port_descriptions[port_index].port_must_bind = 1;
    port_descriptions[port_index].params_count = 8 + 10;
    if (slave_outstanding == 0) {
      slave_outstanding = 1;
      printf("WARNING: in \"%s\" the \"slave_outstanding\" parameter is 0, a default value of 1 is used\n", name());
    }
    port_descriptions[port_index].pending = slave_outstanding;
    port_descriptions[port_index].read_data_queue_size = slave_read_data_queue_size;
    port_descriptions[port_index].write_data_queue_size = slave_write_data_queue_size;
    port_descriptions[port_index].clock = axi_clock;
    port_descriptions[port_index].add_read_phase(tlm::tlm_phase(tlm::BEGIN_REQ), !0, 0);
    port_descriptions[port_index].add_read_phase(tlm::tlm_phase(tlm::END_REQ), !1, 0);
    port_descriptions[port_index].add_read_phase(tlm::tlm_phase(tlm::BEGIN_RESP), !1, 1);
    port_descriptions[port_index].add_read_phase(tlm::tlm_phase(tlm::END_RESP), !0, 1);
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::BEGIN_REQ), !0, 0);
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::END_REQ), !1, 0);
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::BEGIN_RESP), !1, 1);
    port_descriptions[port_index].add_write_phase(tlm::tlm_phase(tlm::END_RESP), !0, 1);
  

  port_descriptions[slave].default_read_transaction_name = "READ";
  
  port_descriptions[slave].default_write_transaction_name = "WRITE";
  

  fix_internal_clock_parameter(clock, "clock");
  set_ports(mb::sysc::sc_time_to_ps(clock), port_count, port_descriptions);

  bool isCpu = false;
  
  esl::tlm_sim::UserRunningModel* userRunningModel = Papoulis_CreateUserRunningModel(name(),
                                                                                     0,
                                                                                     this,
                                                                                     simulation,
                                                                                     false,
                                                                                     isCpu);
  setUserRunningModel(userRunningModel, isCpu);
  set_nominal_voltage(nominal_voltage);
  registerParameter("clock", "sc_core::sc_time", sdGetParameterAsConstString("clock"));
  registerParameter("axi_clock", "sc_core::sc_time", sdGetParameterAsConstString("axi_clock"));
  registerParameter("nominal_voltage", "double", sdGetParameterAsConstString("nominal_voltage"));
  registerParameter("mb_debug", "bool", sdGetParameterAsConstString("mb_debug"));
  registerParameter("mb_debug_start_time", "sc_core::sc_time", sdGetParameterAsConstString("mb_debug_start_time"));
  registerParameter("mb_debug_end_time", "sc_core::sc_time", sdGetParameterAsConstString("mb_debug_end_time"));
  registerParameter("mb_debug_address_read", "const char*", sdGetParameterAsConstString("mb_debug_address_read"));
  registerParameter("mb_debug_address_write", "const char*", sdGetParameterAsConstString("mb_debug_address_write"));
  registerParameter("port_enable", "bool", sdGetParameterAsConstString("port_enable"));
  registerParameter("call_to_default_if", "bool", sdGetParameterAsConstString("call_to_default_if"));
  registerParameter("verbose_parameters", "bool", sdGetParameterAsConstString("verbose_parameters"));
  registerParameter("dmi_enabled", "bool", sdGetParameterAsConstString("dmi_enabled"));
  registerParameter("warning_level", "const char*", sdGetParameterAsConstString("warning_level"));
  registerParameter("slave_pipeline_length", "unsigned int", sdGetParameterAsConstString("slave_pipeline_length"));
  registerParameter("slave_outstanding", "unsigned int", sdGetParameterAsConstString("slave_outstanding"));
  registerParameter("slave_read_data_queue_size", "unsigned int", sdGetParameterAsConstString("slave_read_data_queue_size"));
  registerParameter("slave_write_data_queue_size", "unsigned int", sdGetParameterAsConstString("slave_write_data_queue_size"));
  registerParameter("size_in_bytes", "unsigned long long", sdGetParameterAsConstString("size_in_bytes"));
  registerParameter("endianness", "const char*", sdGetParameterAsConstString("endianness"));
  registerParameter("read_latency", "unsigned long long", sdGetParameterAsConstString("read_latency"));
  registerParameter("write_latency", "unsigned long long", sdGetParameterAsConstString("write_latency"));
  registerParameter("disable_fast_memory", "bool", sdGetParameterAsConstString("disable_fast_memory"));
  registerParameter("disable_dmi_memory", "bool", sdGetParameterAsConstString("disable_dmi_memory"));
  registerParameter("mb_memory_chunk_size", "unsigned long long", sdGetParameterAsConstString("mb_memory_chunk_size"));
  registerParameter("mb_memory_file_storage", "const char*", sdGetParameterAsConstString("mb_memory_file_storage"));
  registerParameter("mb_memory_file_storage_load", "const char*", sdGetParameterAsConstString("mb_memory_file_storage_load"));
  registerParameter("mb_memory_paged", "bool", sdGetParameterAsConstString("mb_memory_paged"));
  registerParameter("mb_memory_max_loaded_num_chunks", "unsigned long long", sdGetParameterAsConstString("mb_memory_max_loaded_num_chunks"));
  set_sync_all(0); 
  set_sync_all(0);
  
  
  
  

  
  

  delay_policy* delay_policy_handle = 0;

  for (unsigned u = 0; u < 1; u++) {
    unsigned port_index = slave + u;
    
    std::string str = std::string(port_descriptions[port_index].port_name) + "." + "READ";
    delay_policy_handle = new delay_policy(userRunningModel,
                                           str.c_str(),
                                           3,
                                           0,
                                           mb::tlm20::SYNC_BEGIN);
    delay_policy_handle->set_power(0);
    m_delay_vector.push_back(delay_policy_handle);
  }
  for (unsigned u = 0; u < 1; u++) {
    unsigned port_index = slave + u;
    
    std::string str = std::string(port_descriptions[port_index].port_name) + "." + "WRITE";
    delay_policy_handle = new delay_policy(userRunningModel,
                                           str.c_str(),
                                           5,
                                           0,
                                           mb::tlm20::SYNC_BEGIN);
    delay_policy_handle->set_power(0);
    m_delay_vector.push_back(delay_policy_handle);
  }

  

  constant_global_power_policy* p = new constant_global_power_policy(userRunningModel);
  
  
  set_nominal_clock(1000000/100); /* in ps */ 
  update_coefficients();
  set_global_power_policy(p);
}


void axi_mem_t_base::update_sync_all() {
  set_sync_all(0);
  set_sync_all(0);
}


void axi_mem_t_base::update_pipeline_parameters(esl::sc_sim::pipeline_policy* handle) {
  if (m_pipeline_vector.size() == 0)
    return;


}


void axi_mem_t_base::update_sequential_parameters(esl::sc_sim::sequential_policy* handle) {
  if (m_sequential_vector.size() == 0)
    return;

}


void axi_mem_t_base::update_delay_parameters(esl::sc_sim::delay_policy* handle) {
  if (m_delay_vector.size() == 0)
    return;

  if (handle == m_delay_vector[0]) {
    handle->set_inner_delay(3);
    handle->set_start_delay(0);
    handle->setSyncMode(mb::tlm20::SYNC_BEGIN);
    handle->set_power(0);
    return;
  }
  if (handle == m_delay_vector[1]) {
    handle->set_inner_delay(5);
    handle->set_start_delay(0);
    handle->setSyncMode(mb::tlm20::SYNC_BEGIN);
    handle->set_power(0);
    return;
  }
}


void axi_mem_t_base::update_bus_parameters(esl::sc_sim::uniform_bus_policy* handle) {
  if (m_bus_vector.size() == 0)
    return;

}


void axi_mem_t_base::update_power_parameters(esl::sc_sim::power_policy* handle) {
  if (m_power_vector.size() == 0)
    return;

}


void axi_mem_t_base::update_state_power_parameters(esl::sc_sim::state_power_policy* handle) {
  if (m_state_power_vector.size() == 0)
    return;

}


void axi_mem_t_base::update_global_power_parameters(esl::sc_sim::constant_global_power_policy* handle) {
  
  
  return;  
}


bool axi_mem_t_base::triggerRegistersGotHit(unsigned portIndex, tlm::tlm_generic_payload& trans) {
  mb::utl::Segment<uint64_t> transactionRange(trans.get_address(), trans.get_address() + trans.get_data_length());

  return false;
}


bool axi_mem_t_base::portHasRegisters(unsigned portIndex) {
  switch (portIndex) {

  }
  return false;
}




/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected.
//* DO NOT MODIFY THIS FILE.
//*
//* This file contains the PVT class for axi_mem.
//* It connects between the PV and T models.
//* Your top-level design should instantiate this model.
//* 
//* In order to synchronize the activty between the PV and the T models, every 
//* PV transaction is monitored and queued in the T sync ports.
//* Whenever a synchronization point is reached, the T models are executed and 
//* the corresponding T transactions are launched.
//* A synchronization point is reached whenever there is a wait statement on a testbench thread. 
//*
//* Model Builder version: 5.1.0
//* Generated on: Jul. 26, 2022 01:49:41 PM, (user: russk)
//*>

#include "axi_mem_model.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;



#include "axi_mem_pv.h"




// Constructor

axi_mem_pvt::axi_mem_pvt(sc_module_name module_name)
  : esl::sc_sim::PVTBaseModel(module_name, 0),
    axi_mem_pvt_param_defaults(this->name()),
    slave("slave"),
    slave_entry("unvisible_slave_entry")
  
,
    m_slave_nb_connector(*this)
  
    

{
  // slave - not a vector port



  m_axi_mem_t = axi_mem_t_base::create_t("T", 1);
  m_axi_mem_pv = new axi_mem_pv("PV");
  bind();
}  


axi_mem_pvt::axi_mem_pvt(sc_module_name module_name, sc_core::sc_time clock_init, sc_core::sc_time axi_clock_init, double nominal_voltage_init, bool mb_debug_init, sc_core::sc_time mb_debug_start_time_init, sc_core::sc_time mb_debug_end_time_init, const char* mb_debug_address_read_init, const char* mb_debug_address_write_init, bool port_enable_init, bool call_to_default_if_init, bool verbose_parameters_init, bool dmi_enabled_init, const char* warning_level_init, unsigned int slave_pipeline_length_init, unsigned int slave_outstanding_init, unsigned int slave_read_data_queue_size_init, unsigned int slave_write_data_queue_size_init, unsigned long long size_in_bytes_init, const char* endianness_init, unsigned long long read_latency_init, unsigned long long write_latency_init, bool disable_fast_memory_init, bool disable_dmi_memory_init, unsigned long long mb_memory_chunk_size_init, const char* mb_memory_file_storage_init, const char* mb_memory_file_storage_load_init, bool mb_memory_paged_init, unsigned long long mb_memory_max_loaded_num_chunks_init)
  : esl::sc_sim::PVTBaseModel(module_name, 0),
  axi_mem_pvt_param_defaults(this->name(), clock_init, axi_clock_init, nominal_voltage_init, mb_debug_init, mb_debug_start_time_init, mb_debug_end_time_init, mb_debug_address_read_init, mb_debug_address_write_init, port_enable_init, call_to_default_if_init, verbose_parameters_init, dmi_enabled_init, warning_level_init, slave_pipeline_length_init, slave_outstanding_init, slave_read_data_queue_size_init, slave_write_data_queue_size_init, size_in_bytes_init, endianness_init, read_latency_init, write_latency_init, disable_fast_memory_init, disable_dmi_memory_init, mb_memory_chunk_size_init, mb_memory_file_storage_init, mb_memory_file_storage_load_init, mb_memory_paged_init, mb_memory_max_loaded_num_chunks_init),
    slave("slave"),
    slave_entry("unvisible_slave_entry")
    
,
    m_slave_nb_connector(*this)
    
    
{

  // slave - not a vector port
  


  m_axi_mem_t = axi_mem_t_base::create_t("T", 1);
  m_axi_mem_pv = new axi_mem_pv("PV");
  bind();
} 


axi_mem_pvt::axi_mem_pvt(sc_module_name module_name,  std::vector<std::pair<char*, unsigned int> > &change_parameters)
  : esl::sc_sim::PVTBaseModel(module_name, 0),
  axi_mem_pvt_param_defaults(this->name(), change_parameters),
    slave("slave"),
    slave_entry("unvisible_slave_entry")
    
,
    m_slave_nb_connector(*this)
    
{

  // slave - not a vector port
  


  m_axi_mem_t = axi_mem_t_base::create_t("T", 1);
  m_axi_mem_pv = new axi_mem_pv("PV");
  bind();
} 


axi_mem_pvt::~axi_mem_pvt() {
  remove_pending_scenes();
  
  delete m_axi_mem_t;
  
  delete m_axi_mem_pv;
}





void axi_mem_pvt::bind()
{
  /* connect pv to entry ports */
  
  
  slave_entry.bind(getPV()->slave);   

  /* set callbacks on external and entry ports */ 

  slave.b_transport_cb.set(&slave_entry, &slave_entry_type::b_transport);
  slave.transport_dbg_cb.set(&slave_entry, &slave_entry_type::transport_dbg);
  slave.get_direct_mem_ptr_cb.set(&slave_entry, &slave_entry_type::get_direct_mem_ptr);
  
  
  /* connect t non blocking callbacks */

  slave.nb_transport_fw_cb.set(this, &self_type::receive_nb_transport_slave);
  getT()->set_port_cb(0, &m_slave_nb_connector);
  
  slave_entry.invalidate_direct_mem_ptr_cb.set(&slave, &slave_type::invalidate_direct_mem_ptr);

  /* check mb_event policies */
  m_axi_mem_t->check_mb_events();
  
}






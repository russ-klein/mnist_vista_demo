
/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for matchlib_dma.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 5.1.0
//* Generated on: Mar. 11, 2022 09:04:17 AM, (user: russk)
//* Automatically merged on: Mar. 11, 2022 11:45:30 AM, (user: russk)
//*>



#include "matchlib_dma_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor

matchlib_dma_pv::matchlib_dma_pv(sc_module_name module_name)
  : matchlib_dma_pv_base(module_name)
  , clk("clk",1, SC_NS, 0.5, 0, SC_NS, true)
{

  // connections to matchlib dma 
  matchlib_dma_instance.clk(clk);
  matchlib_dma_instance.rst_bar(rst_bar);

  matchlib_dma_instance.r_slave0(dma_slave_r_chan);
  matchlib_dma_instance.w_slave0(dma_slave_w_chan);
  matchlib_dma_instance.r_master0(dma_master_r_chan);
  matchlib_dma_instance.w_master0(dma_master_w_chan);
  matchlib_dma_instance.dma_done(dma_done);

  tb_r_master(dma_slave_r_chan);
  tb_w_master(dma_slave_w_chan);
  tb_r_slave (dma_master_r_chan);
  tb_w_slave (dma_master_w_chan);

  SC_CTHREAD(reset, clk);

  SC_THREAD(slave_r_process);
  sensitive << clk.posedge_event();
  async_reset_signal_is(rst_bar, false);
  
  SC_THREAD(slave_w_process);
  sensitive << clk.posedge_event();
  async_reset_signal_is(rst_bar, false);

  SC_THREAD(done_mon);
  sensitive << clk.posedge_event();
  async_reset_signal_is(rst_bar, false);

  SC_THREAD(heartbeat);
  sensitive << clk.posedge_event();
  async_reset_signal_is(rst_bar, false);

  SC_THREAD(set_source);
  sensitive << clk.posedge_event();
  async_reset_signal_is(rst_bar, false);
}   

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for source register.
// The newValue has been already assigned to the source register.

void matchlib_dma_pv::cb_write_source(unsigned int newValue) {
  wait(10* clock);
  cout << "programmed source address register " << endl;
  cout << "address: " << offsetof(dma_address_map, ar_addr) << " new value: " << hex << newValue << endl << dec;
  //tb_w_master.single_write((int)offsetof(dma_address_map, ar_addr), (int) newValue);  // send the value down to the source
  //tb_w_master.single_write(1, 2);
  cout << "Damage has been done " << endl;
  wait (10* clock);
}
 

// Write callback for destination register.
// The newValue has been already assigned to the destination register.

void matchlib_dma_pv::cb_write_destination(unsigned int newValue) {
  wait(10*clock);
  cout << "programmed destination address register " << endl;
  //tb_w_master.single_write((int)offsetof(dma_address_map, aw_addr), (int) newValue);
}
 

// Write callback for size register.
// The newValue has been already assigned to the size register.

void matchlib_dma_pv::cb_write_size(unsigned int newValue) {
  wait(10*clock);
  cout << "programmed size register " << endl;
  //tb_w_master.single_write((int)offsetof(dma_address_map, len), (int) newValue);
}
 

// Write callback for go register.
// The newValue has been already assigned to the go register.

void matchlib_dma_pv::cb_write_go(unsigned int newValue) {
  wait(10*clock);
  cout << "Said GO! " << endl;
  //tb_w_master.single_write((int)offsetof(dma_address_map, start), (int) 1);
}

 

// Write callback for irq_ack register.
// The newValue has been already assigned to the irq_ack register.

void matchlib_dma_pv::cb_write_irq_ack(unsigned int newValue) {
  
}
    

// Read callback for slave port.
// Returns true when successful.

bool matchlib_dma_pv::slave_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for slave port.
// Returns true when successful.

bool matchlib_dma_pv::slave_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  cout << "Got a write address: " << hex << address << " size: " << dec << size;  
  return true;
} 





unsigned matchlib_dma_pv::slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned matchlib_dma_pv::slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool matchlib_dma_pv::slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 

void matchlib_dma_pv::cb_transport_dbg_source(tlm::tlm_generic_payload& trans) {}

void matchlib_dma_pv::cb_transport_dbg_destination(tlm::tlm_generic_payload& trans) {}

void matchlib_dma_pv::cb_transport_dbg_size(tlm::tlm_generic_payload& trans) {}

void matchlib_dma_pv::cb_transport_dbg_go(tlm::tlm_generic_payload& trans) {}

void matchlib_dma_pv::cb_transport_dbg_irq_ack(tlm::tlm_generic_payload& trans) {}



// in order to minimize merging conflicts, we recommend to add your functions after this comment

void matchlib_dma_pv::slave_r_process() {
  tb_r_slave.reset();

  wait();

  while(1) {
    ar_payload ar;
    r_payload r;
    int count = 0;
/*
    tb_r_slave.start_multi_read(ar);

    do {
      int data;
      cout <<  "doing a read " << endl;
      master_read((int)(ar.addr + (count * 4)), &data, 1);
      r.data = data;
      r.resp = Enc::XRESP::OKAY;
      count++;
    } while (tb_r_slave.next_multi_read(ar, r));
*/
    wait();
  }
}

void matchlib_dma_pv::heartbeat()
{
  wait();
  while(1) {
    // cout << "Pulse " << sc_time_stamp().to_string() << hex << " source: " << source << " destination: " << destination << " size: " << size << endl << dec;
    wait();
  }
}

void matchlib_dma_pv::slave_w_process() {
  tb_w_slave.reset();

  wait();

  while(1) {
    aw_payload aw;
    w_payload w;
    b_payload b;

    int count = 0;
 /*
    tb_w_slave.start_multi_write(aw, b);
    cout << "doing a write " << endl;

    do {
      w = tb_w_slave.w.Pop();
      int data = w.data;
      master_write((int) (aw.addr + (count * 4)), &data, 1);
    } while (tb_w_slave.next_multi_write(aw));

    b.resp = Enc::XRESP::OKAY;
    tb_w_slave.b.Push(b);
 */
    wait();
  }
}
      
      
      
void matchlib_dma_pv::done_mon()
{
  dma_done.ResetRead();
  wait();
  done = 0;

  while(1) {
    bool v = dma_done.Pop();

    done = 1;
    irq = 1;

    cout << "DMA operation complete " << endl;
  }
}

void matchlib_dma_pv::reset()
{
  rst_bar.write(0);
  wait(5 * clock);
  rst_bar.write(1);
  wait(100*clock);
}

void matchlib_dma_pv::set_source()
{
  tb_r_master.reset();
  tb_w_master.reset();

  wait();
 
  while(1) {
    // tb_w_master.single_write(0, (int) source);
   wait();
  }
}

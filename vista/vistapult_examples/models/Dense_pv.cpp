
/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for Dense.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 5.1.0
//* Generated on: Jul. 20, 2022 05:22:42 PM, (user: russk)
//*>


#define MEMORY_BASE (0x40800000)

#include "Dense_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor

Dense_pv::Dense_pv(sc_module_name module_name)
  : Dense_pv_base(module_name) {
}   

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for go register.
// The newValue has been already assigned to the go register.

void Dense_pv::cb_write_go(unsigned int newValue) {

  if (go_ready) {
    go_ready = 0;
    done = 0;

    dense_vista();

    go_ready = 1;
    done_valid = 1;
    done = 1;
  }
}
    

// Read callback for slave port.
// Returns true when successful.

bool Dense_pv::slave_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for slave port.
// Returns true when successful.

bool Dense_pv::slave_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 





unsigned Dense_pv::slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned Dense_pv::slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool Dense_pv::slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 

void Dense_pv::cb_transport_dbg_go(tlm::tlm_generic_payload& trans) {}



// in order to minimize merging conflicts, we recommend to add your functions after this comment

Dense_pv::hw_cat_type Dense_pv::get_cat_value(int memory, unsigned int address)
{
  unsigned int buffer[10];
  hw_cat_type r;

  master_read(MEMORY_BASE + address * 4, buffer, 1);
  r.set_slc(0, (ac_int<32,false>) buffer[0]);
//printf("read operation conv2d accelerator: address: %08x data: %08x \n", 0x40000000 + address * 4, buffer[0]);
  return r;
}

void Dense_pv::set_cat_value(int memory, unsigned int address, hw_cat_type data)
{
  unsigned int buffer[10];
  unsigned int d;

  buffer[0] = data.slc<32>(0);
  master_write(MEMORY_BASE + address*4, buffer, 1);
}



void Dense_pv::dense_vista()
{

    int i, n, c;
    hw_cat_type sum;
    hw_cat_type bias_value;
    int chatty = 0;

    int memory = 0;
printf("Dense layer starting... \n");
    for (i=0; i<output_image_elements; i++) {
int oe = output_image_elements;
printf("%d of %d output images\n", i, oe);
        sum = 0.0;
        for (n=0; n<num_units; n++) {
            for (c=0; c<unit_count; c++) {
                sum += get_cat_value(memory, input_image + n * unit_count + c) *
                       get_cat_value(memory, weights + (i*num_units*unit_count)+n*unit_count+c);
                // sum += input_image[n * unit_count + c] * weights[(i*num_units*unit_count)+n*unit_count+c];
                // if (chatty) printf("image_value: %5.3f weight_value: %5.3f product: %5.3f sum: %5.3f \n",
                //       input_image[n * unit_count + c], weights[(i*num_units*unit_count)+n*unit_count+c], 
                //       input_image[n * unit_count + c] * weights[(i*num_units*unit_count)+n*unit_count+c], sum);
            }
        }
printf("HW side:  sum= %f \n", sum.to_double());
        if (bias) {
            bias_value = get_cat_value(memory, biases + i); // biases[i];
            set_cat_value(memory, output_image + i, sum + bias_value); // output_image[i] = sum + bias_value;
        } else {
            set_cat_value(memory, output_image + i, sum); // output_image[i] = sum;
        }
        if (relu) {
            //if (output_image[i] <0) output_image[i] = 0;
            if (get_cat_value(memory, output_image + i) < 0) set_cat_value(memory, output_image + i, 0); // output_image[i] = 0;
        }
    }
printf("Dense layer done... \n");
}


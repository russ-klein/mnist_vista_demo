
/**************************************************************/
/*                                                            */
/*               Copyright (c) Siemens 2021                   */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF SIEMENS       */
/*             CORPORATION OR ITS LICENSORS AND IS            */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for dma.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 5.1.0
//* Generated on: Mar. 06, 2022 06:54:55 PM, (user: russk)
//*>



#include "dma_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor

dma_pv::dma_pv(sc_module_name module_name)
  : dma_pv_base(module_name) {
}   

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for go register.
// The newValue has been already assigned to the go register.

void dma_pv::cb_write_go(unsigned int newValue) {
  do_dma();
}
 

// Write callback for irq_ack register.
// The newValue has been already assigned to the irq_ack register.

void dma_pv::cb_write_irq_ack(unsigned int newValue) {
  irq.write(false);
}
    

// Read callback for slave port.
// Returns true when successful.

bool dma_pv::slave_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for slave port.
// Returns true when successful.

bool dma_pv::slave_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 





unsigned dma_pv::slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned dma_pv::slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool dma_pv::slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 

void dma_pv::cb_transport_dbg_go(tlm::tlm_generic_payload& trans) {}

void dma_pv::cb_transport_dbg_irq_ack(tlm::tlm_generic_payload& trans) {}



// in order to minimize merging conflicts, we recommend to add your functions after this comment

#define BURST_SIZE 16
#define MAX(a, b) ((a>b) ? a : b)
#define MIN(a, b) ((a<b) ? a : b)

void dma_pv::print_buffer(unsigned int *d, unsigned int n)
{
  unsigned int i;

  for (i=0; i<n; i++) cout << d[i] << " ";
  cout << endl;

}


void dma_pv::do_dma()
{
  // call from cb_write_go

  unsigned int i = 0;
  unsigned int burst;
  unsigned int buffer[BURST_SIZE];

  done = 0;

  cout << "DMA>> operation start " << endl;
  cout << "DMA>> moving  " << size << " words from " << hex << source << " to " << destination << endl << dec;

  while (i<size) {
    burst = MIN(size - i, BURST_SIZE);
    master_read(source + (i << 2), buffer, burst);
    master_write(destination + (i << 2), buffer, burst);
    i += burst;
  } 
  
  done = 1;
  cout << "DMA>> transfer completed " << endl;

  irq.write(true); 
  cout << "DMA>> sent interrupt " << endl;

  wait (1000000 * clock);
  cout << "DMA>> operation timed out " << endl;
  sc_stop();

  return;
}
